System.register("chunks:///_virtual/UnitMoveState.ts", ["cc", "./FixMath.ts", "./Target.ts", "./EnumDefine.ts", "./State.ts"], function(t) {
    "use strict";
    var e, i, n, a, o, r, s;
    return {
        setters: [function(t) {
            e = t.cclegacy
        }, function(t) {
            i = t.FixMath
        }, function(t) {
            n = t.TargetUnit
        }, function(t) {
            a = t.StateType, o = t.UnitConfig, r = t.PathState
        }, function(t) {
            s = t.State
        }],
        execute: function() {
            e._RF.push({}, "26872svGHtBzZD9s0zy7TWk", "UnitMoveState", void 0);
            t("UnitMoveState", class extends s {
                constructor(t, e) {
                    super(t, e), this.type = a.Move
                }
                moveToTargetPos() {
                    let t = this._owner,
                        e = t.curTarget;
                    return null != e && (null != e.unit && e.pos.set(e.unit.position), !(i.distanceX(e.pos, t.position) <= 1) && t.movectr.startMove())
                }
                onEnter() {
                    let t = this._owner;
                    this.moveToTargetPos() ? t.animatorctr.changeState(o.ANIMATOR_MOVE, !1) : this.exitState()
                }
                onUpdate(t) {
                    let e = this._owner;
                    if (null == e.curTarget) return void this.exitState();
                    if (null != e.checkTarget()) return void this.exitState();
                    switch (e.movectr.state) {
                        case r.Seeking:
                            e.animatorctr.hasState(o.ANIMATOR_MOVE) || e.animatorctr.changeState(o.ANIMATOR_MOVE);
                            break;
                        case r.Stop:
                            this.exitState()
                    }
                }
                exitState() {
                    let t = this._owner;
                    if (t.animatorctr.hasState(o.ANIMATOR_MOVE)) {
                        const e = t.curTarget;
                        if (null != e && e.type == n.T_Unit) {
                            let n = i.distanceX(t.position, e.unit.position);
                            if (n -= t.radiusSize + e.unit.radiusSize, n = i.round(n), n > t.attackDistance && this.moveToTargetPos()) return
                        }
                    }
                    this.changeState()
                }
                onExit() {
                    let t = this._owner;
                    null != t.curTarget && (t.curTarget.type == n.T_Unit && null != t.curTarget.unit && t.lookAt(t.curTarget.unit.position), t.applyTarget(!0), t.movectr.stopMove())
                }
            }), e._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/UnitOverState.ts", ["cc", "./EnumDefine.ts", "./State.ts"], function(t) {
    "use strict";
    var e, n, r, s;
    return {
        setters: [function(t) {
            e = t.cclegacy
        }, function(t) {
            n = t.StateType, r = t.UnitConfig
        }, function(t) {
            s = t.State
        }],
        execute: function() {
            e._RF.push({}, "13621vJpYZNmqj0Ww+A0BU9", "UnitOverState", void 0);
            t("UnitOverState", class extends s {
                constructor(t, e) {
                    super(t, e), this.type = n.Over
                }
                onEnter() {
                    let t = this._owner;
                    t.stopAI++, t.animatorctr.changeState(r.ANIMATOR_IDLE), t.statectr.lockCurrenState = !0
                }
                onUpdate(t) {}
                onExit() {
                    this._owner.stopAI--
                }
            }), e._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/UnitShamPlayer.ts", ["cc", "./Unit.ts"], function(t) {
    "use strict";
    var n, e;
    return {
        setters: [function(t) {
            n = t.cclegacy
        }, function(t) {
            e = t.Unit
        }],
        execute: function() {
            n._RF.push({}, "9c0e0AzdvlCWJFIIzROHu7+", "UnitShamPlayer", void 0);
            t("UnitShamPlayer", class extends e {
                init(t) {
                    super.init(t), t.attack = null, this.shamUnit = !0
                }
                setHpBar(t) {}
                newUnitAI(t) {
                    return new aiMap.shamplayer
                }
            }), n._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/UnitSkillState.ts", ["cc", "./SkillRunner.ts", "./Target.ts", "./EnumDefine.ts", "./State.ts"], function(t) {
    "use strict";
    var l, n, e, i, r;
    return {
        setters: [function(t) {
            l = t.cclegacy
        }, function(t) {
            n = t.SkillRunner
        }, function(t) {
            e = t.TargetSkill
        }, function(t) {
            i = t.StateType
        }, function(t) {
            r = t.State
        }],
        execute: function() {
            l._RF.push({}, "e3ad2PI8PBDX6X9fLpqzhOQ", "UnitSkillState", void 0);
            t("UnitSkillState", class extends r {
                constructor(t, l) {
                    super(t, l), this._skillRunner = void 0, this.type = i.Skill
                }
                onEnter() {
                    let t = this._owner;
                    if (null == t.curSkill && 0 != t.data.attack.state) return void this.changeState();
                    null == t.curSkill && (t.wantSkill = e.toSkill(t.data.attack), t.applySkill()), t.idle(), null != t.curTarget && null != t.curTarget.unit && t.lookAt(t.curTarget.unit.position), t.currenSkillRunner && t.currenSkillRunner.interrupt(), t.statectr.lockCurrenState = !0;
                    let l = new n;
                    l.init(t, t.curSkill.skill), l.start(), null != t.curSkill.target && (l.lockTarget = t.curSkill.target), t.skillctr.addRunner(l), t.currenSkillRunner = l, this._skillRunner = l
                }
                onUpdate(t) {
                    const l = this._skillRunner,
                        n = this._owner;
                    if (null != l && !l.isInterrupt || null != n.wantSkill) return null == n.wantSkill || this._ctr.lockCurrenState ? void 0 : (null != l && l.interrupt(), n.currenSkillRunner = null, n.applySkill(), void this.onEnter());
                    this.changeState()
                }
                onExit() {
                    let t = this._owner;
                    t.applySkill(!0), this._skillRunner && this._skillRunner.interrupt(), this._skillRunner = null, t.currenSkillRunner = null, t.movectr.startMove()
                }
            }), l._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/UnitSoloBoss.ts", ["cc", "./ConfigGlobal.ts", "./FixMath.ts", "./EventDefine.ts", "./MetaAttrib.ts", "./Unit.ts"], function(t) {
    "use strict";
    var i, s, n, e, h, o;
    return {
        setters: [function(t) {
            i = t.cclegacy
        }, function(t) {
            s = t.ConfigGlobal
        }, function(t) {
            n = t.FixMath
        }, function(t) {
            e = t.EventDefine
        }, function(t) {
            h = t.AttribDefine
        }, function(t) {
            o = t.Unit
        }],
        execute: function() {
            i._RF.push({}, "3e29dX3jHRABbL7Wo2yC/EY", "UnitSoloBoss", void 0);
            const u = [4011, 4012, 4013, 4014];
            t("UnitSoloBoss", class extends o {
                constructor(...t) {
                    super(...t), this.units = [], this.hpNum = 0, this.hurtNum = 0, this._index = 0
                }
                init(t) {
                    super.init(t), this.modelObj.skins = ["1", "2", "3", "4"]
                }
                setHpBar(t) {}
                _hpAction(t, i, e) {
                    if (!(e > 200) && (e++, t > 0 && 0 == this.data.currenHp)) {
                        this.hpNum++;
                        const o = s.league_solo_chapter_transform_level;
                        this.hpNum >= o[0] && 0 == this._index && (this._index = 1, this.modelObj.skins = ["2", "3", "4"]), this.hpNum >= o[1] && 1 == this._index && (this._index = 2, this.modelObj.skins = ["3", "4"]), this.hpNum >= o[2] && 2 == this._index && (this._index = 3, this.modelObj.skins = ["4"]), t = n.roundInt(t + i);
                        const u = Math.min(this.units.length - 1, this.hpNum),
                            r = this.units[u],
                            a = configAttribute.getDataByList("module", 1);
                        for (const t of a) this.data.attribs[t.id].baseValue = r[t.key];
                        if (this.data.currenHp = this.data.getAttribByInt(h.hp), this.data.currenHp <= t) return t = n.roundInt(t - this.data.currenHp), this.data.currenHp = 0, void this._hpAction(t, 0, e);
                        this.data.currenHp = n.roundInt(this.data.currenHp - t)
                    }
                }
                onHpAction(t, i) {
                    this.hurtNum += t > 0 ? t : 0;
                    const s = this.hpNum;
                    this._hpAction(t, i, 0), 0 != i && this.battleMain.emit(e.BossHpChange, this), this.hpNum != s && this.battleMain.emit(e.UnitHpNumChange, this.hpNum)
                }
                get weapon() {
                    return u[this._index]
                }
            }), i._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/UnitT20Boss.ts", ["cc", "./EventDefine.ts", "./MetaAttrib.ts", "./Unit.ts"], function(t) {
    "use strict";
    var i, s, e, n;
    return {
        setters: [function(t) {
            i = t.cclegacy
        }, function(t) {
            s = t.EventDefine
        }, function(t) {
            e = t.AttribDefine
        }, function(t) {
            n = t.Unit
        }],
        execute: function() {
            i._RF.push({}, "be951hwbLpClrnHgWs2TE1w", "UnitT20Boss", void 0);
            t("UnitT20Boss", class extends n {
                constructor(...t) {
                    super(...t), this.units = [], this.hpNum = 0, this.hurtNum = 0, this.index = 0
                }
                setHpBar(t) {}
                _hpAction(t, i) {
                    if (t > 0 && 0 == this.data.currenHp) {
                        this.hpNum++, this.index++, t += i;
                        const s = this.index;
                        if (s >= this.units.length) return;
                        const n = this.units[s],
                            a = configAttribute.getDataByList("module", 1);
                        for (const t of a) this.data.attribs[t.id].baseValue = n[t.key];
                        if (this.data.currenHp = this.data.getAttribByInt(e.hp), this.data.currenHp <= t) return t -= this.data.currenHp, this.data.currenHp = 0, void this._hpAction(t, 0);
                        this.data.currenHp -= t
                    }
                }
                onHpAction(t, i) {
                    this.hurtNum += t > 0 ? t : 0;
                    const e = this.hpNum;
                    this._hpAction(t, i), 0 != i && this.battleMain.emit(s.BossHpChange, this), this.hpNum != e && this.battleMain.emit(s.UnitHpNumChange, this.hpNum), GlobalDefine.CLIENT_TYPE || this.battleMain.curRecord.addHpState(this)
                }
                onAddDamage(t, i, s) {
                    this.battleMain.curRecord.addDamage(t.attacker_id, t.defence_id, i, s, 0)
                }
            }), i._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/UnitT20Player.ts", ["cc", "./Unit.ts"], function(t) {
    "use strict";
    var e, a;
    return {
        setters: [function(t) {
            e = t.cclegacy
        }, function(t) {
            a = t.Unit
        }],
        execute: function() {
            e._RF.push({}, "668faAupatJXru52r7Kkp8e", "UnitT20Player", void 0);
            t("UnitT20Player", class extends a {
                setHpBar(t) {
                    this.battleMain.roleId == this.data.roleId ? this.battleMain.renderMgr.addHpBar(this, "self") : this.battleMain.renderMgr.addHpBar(this, "blue")
                }
                newUnitAI(t) {
                    return new aiMap.t20player
                }
                onHpAction(t, e) {
                    this.battleMain.printLogFlag && this.battleMain.printLogDebug(`onHpAction, unitId ${this.unitId}, hurtCount ${t}, changeHp ${e}`), GlobalDefine.CLIENT_TYPE || this.isCallType || this.battleMain.curRecord.addHpState(this)
                }
                onAddDamage(t, e, a) {
                    this.isCallType || this.battleMain.curRecord.addDamage(t.attacker_id, t.defence_id, e, a, this.data.currenHp <= 0 ? 1 : 0)
                }
            }), e._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/UnitTFPlayer.ts", ["cc", "./Unit.ts"], function(t) {
    "use strict";
    var e, n;
    return {
        setters: [function(t) {
            e = t.cclegacy
        }, function(t) {
            n = t.Unit
        }],
        execute: function() {
            e._RF.push({}, "6741aKZD4RG6JG2dlPAMamO", "UnitTFPlayer", void 0);
            t("UnitTFPlayer", class extends n {
                setHpBar(t) {
                    t.unitType.bar && "" != t.unitType.bar && this.battleMain.renderMgr.addHpBar(this, t.unitType.bar, !0)
                }
                newUnitAI(t) {
                    return new aiMap.tfplayer
                }
            }), e._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/UnitWorldBoss.ts", ["cc", "./EventDefine.ts", "./MetaAttrib.ts", "./Unit.ts"], function(t) {
    "use strict";
    var i, s, n, e;
    return {
        setters: [function(t) {
            i = t.cclegacy
        }, function(t) {
            s = t.EventDefine
        }, function(t) {
            n = t.AttribDefine
        }, function(t) {
            e = t.Unit
        }],
        execute: function() {
            i._RF.push({}, "35b144B0wtPNIpzULSSk/SO", "UnitWorldBoss", void 0);
            t("UnitWorldBoss", class extends e {
                constructor(...t) {
                    super(...t), this.units = [], this.hpNum = 0, this.hurtNum = 0
                }
                setHpBar(t) {}
                _hpAction(t, i, s) {
                    if (!(s > 200) && (s++, t > 0 && 0 == this.data.currenHp)) {
                        this.hpNum++, t += i;
                        const e = Math.min(this.units.length - 1, this.hpNum),
                            h = this.units[e],
                            u = configAttribute.getDataByList("module", 1);
                        for (const t of u) this.data.attribs[t.id].baseValue = h[t.key];
                        if (this.data.currenHp = this.data.getAttribByInt(n.hp), this.data.currenHp <= t) return t -= this.data.currenHp, this.data.currenHp = 0, void this._hpAction(t, 0, s);
                        this.data.currenHp -= t
                    }
                }
                onHpAction(t, i) {
                    this.hurtNum += t > 0 ? t : 0;
                    const n = this.hpNum;
                    this._hpAction(t, i, 0), 0 != i && this.battleMain.emit(s.BossHpChange, this), this.hpNum != n && this.battleMain.emit(s.UnitHpNumChange, this.hpNum)
                }
            }), i._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/UnitWorldBossPlayer.ts", ["cc", "./Unit.ts"], function(t) {
    "use strict";
    var e, r;
    return {
        setters: [function(t) {
            e = t.cclegacy
        }, function(t) {
            r = t.Unit
        }],
        execute: function() {
            e._RF.push({}, "add158o25VHWoZyr28RxlSv", "UnitWorldBossPlayer", void 0);
            t("UnitWorldBossPlayer", class extends r {
                setHpBar(t) {
                    this.battleMain.roleId == this.data.roleId && this.battleMain.renderMgr.addHpBar(this, "self")
                }
                newUnitAI(t) {
                    return new aiMap.t20player
                }
            }), e._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/UpdateBindMgr.ts", ["cc", "./PoolMgr.ts", "./UILabelUpdate.ts"], function(e) {
    "use strict";
    var t, a, n;
    return {
        setters: [function(e) {
            t = e.cclegacy
        }, function(e) {
            a = e.poolMgr
        }, function(e) {
            n = e.labelUpdate
        }],
        execute: function() {
            t._RF.push({}, "8c810PeXiZFOoiGPespUL8o", "UpdateBindMgr", void 0);
            e("updateBindMgr", new class {
                update(e) {
                    netManager.update(e), normalTimer.update(e), coroutine.update(e), battleMain.update(e), uiMgr.update(e), normalTween.update(e), n.update(), nodeInstantiate.update(e), resourceMgr.update()
                }
                lateUpdate(e) {
                    a.update(e)
                }
            });
            t._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/UpgradeResultView.ts", ["cc", "./AudioMgr.ts", "./UIList.ts", "./NodeUtil.ts", "./StringUtil.ts", "./index52.ts", "./HorseDataChche.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var e, s, i, n, r, o, a, h, l, d, u;
    return {
        setters: [function(t) {
            e = t.Button, s = t.ScrollView, i = t.Label, n = t.cclegacy, r = t.js
        }, function(t) {
            o = t.audioMgr
        }, function(t) {
            a = t.ListItem
        }, function(t) {
            h = t.default
        }, function(t) {
            l = t.default
        }, null, function(t) {
            d = t.HorseDataCache
        }, function(t) {
            u = t.BaseView
        }],
        execute: function() {
            n._RF.push({}, "ddb06B33rVKzKym1vRSzA2f", "UpgradeResultView", void 0);
            t("default", class extends u {
                constructor() {
                    super(), this.curLevel = void 0, this.AttrlistItem = void 0, this.attrUIList = void 0, this.name = "UpgradeResultView", this.url = "ui/module/horse/UpgradeResultView", this.poolTime = 3e3
                }
                onInit() {
                    const t = this.findChild("imgMask");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const i = this.findChildComponent("root/content/nodeChange/ScrollView", s);
                    this.attrUIList = this.addUIList(i, c)
                }
                onAfterOpen() {
                    o.playSound("common_reward"), this.curLevel = IS(d).curLevel, this.refreshShow()
                }
                refreshShow() {
                    const t = this.findChildComponent("root/content/nodeChange/txtLevelBase", i),
                        e = this.findChildComponent("root/content/nodeChange/txtLevelNext", i),
                        s = configMount_level.getDataByKey(this.curLevel - 1),
                        n = configMount_level.getDataByKey(this.curLevel);
                    if (this.AttrlistItem = [], null != n) {
                        t.string = s.name, e.string = n.name;
                        for (var r = 0; r < s.attr.length; r++) {
                            let t = configAttribute.getDataByKey(s.attr[r][0]);
                            var o = {
                                show_type: t.show_type,
                                name: t.desc,
                                base: s.attr[r][1],
                                next: n.attr[r][1]
                            };
                            this.AttrlistItem.push(o)
                        }
                        this.attrUIList.datas = this.AttrlistItem
                    }
                }
                registerUpdateHandler() {}
                onBeforeClose() {}
                onDestroy() {}
            });
            class c extends a {
                constructor(...t) {
                    super(...t), this.txtAttrName = void 0, this.txtAttrBase = void 0, this.txtAttrNext = void 0
                }
                onInit() {
                    this.txtAttrName = h.findChildComponent(this.node, "txtAttrName", i), this.txtAttrBase = h.findChildComponent(this.node, "txtAttrBase", i), this.txtAttrNext = h.findChildComponent(this.node, "txtAttrNext", i)
                }
                onRender(t, e) {
                    this.txtAttrName.string = t.name, 2 == t.show_type ? (this.txtAttrBase.string = r.formatStr("%s%", l.GetNumString(t.base / 100)), this.txtAttrNext.string = r.formatStr("%s%", l.GetNumString(t.next / 100))) : 3 == t.show_type ? (this.txtAttrBase.string = l.GetNumString(Math.floor(t.base / 100) / 100), this.txtAttrNext.string = l.GetNumString(Math.floor(t.next / 100) / 100)) : (this.txtAttrBase.string = l.GetNumString(t.base), this.txtAttrNext.string = l.GetNumString(t.next))
                }
                onItemClick() {}
            }
            n._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/V2.ts", ["cc", "./FixMath.ts"], function(t) {
    "use strict";
    var s, i;
    return {
        setters: [function(t) {
            s = t.cclegacy
        }, function(t) {
            i = t.FixMath
        }],
        execute: function() {
            s._RF.push({}, "ff329iamyJGV4Zk5cRgAf6Q", "V2", void 0);
            const h = t("EPSILON", 1e-6),
                r = i.round;
            class e {
                static clone(t) {
                    return new e(t.x, t.y)
                }
                static copy(t, s) {
                    return t.x = s.x, t.y = s.y, t
                }
                static set(t, s, i) {
                    return t.x = s, t.y = i, t
                }
                static add(t, s, i) {
                    return t.x = r(s.x + i.x), t.y = r(s.y + i.y), t
                }
                static subtract(t, s, i) {
                    return t.x = r(s.x - i.x), t.y = r(s.y - i.y), t
                }
                static multiplyScalar(t, s, i) {
                    return t.x = r(s.x * i), t.y = r(s.y * i), t
                }
                static distance(t, s) {
                    const i = r(s.x - t.x),
                        h = r(s.y - t.y);
                    return r(Math.sqrt(r(r(i * i) + r(h * h))))
                }
                static normalize(t, s) {
                    const i = s.x,
                        h = s.y;
                    let e = r(r(i * i) + r(h * h));
                    return e > 0 && (e = r(1 / r(Math.sqrt(e))), t.x = r(i * e), t.y = r(h * e)), t
                }
                static dot(t, s) {
                    return r(t.x * s.x + t.y * s.y)
                }
                static cross(t, s, i) {
                    return r(t.x * s.y - t.y * s.x)
                }
                static str(t) {
                    return `V2(${t.x}, ${t.y})`
                }
                static strictEquals(t, s) {
                    return t.x === s.x && t.y === s.y
                }
                static equals(t, s, i = h) {
                    return Math.abs(t.x - s.x) <= i * Math.max(1, Math.abs(t.x), Math.abs(s.x)) && Math.abs(t.y - s.y) <= i * Math.max(1, Math.abs(t.y), Math.abs(s.y))
                }
                constructor(t, s) {
                    t && "object" == typeof t ? (this.x = t.x, this.y = t.y) : (this.x = t || 0, this.y = s || 0)
                }
                clone() {
                    return new e(this.x, this.y)
                }
                set(t, s) {
                    return t && "object" == typeof t ? (this.x = r(t.x), this.y = r(t.y)) : (this.x = r(t) || 0, this.y = r(s) || 0), this
                }
                equals(t, s = h) {
                    return Math.abs(this.x - t.x) <= s * Math.max(1, Math.abs(this.x), Math.abs(t.x)) && Math.abs(this.y - t.y) <= s * Math.max(1, Math.abs(this.y), Math.abs(t.y))
                }
                equals2f(t, s, i = h) {
                    return Math.abs(this.x - t) <= i * Math.max(1, Math.abs(this.x), Math.abs(t)) && Math.abs(this.y - s) <= i * Math.max(1, Math.abs(this.y), Math.abs(s))
                }
                strictEquals(t) {
                    return t && this.x === t.x && this.y === t.y
                }
                strictEquals2f(t, s) {
                    return this.x === t && this.y === s
                }
                toString() {
                    return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)})`
                }
                lerp(t, s) {
                    const i = this.x,
                        h = this.y;
                    return this.x = r(i + s * (t.x - i)), this.y = r(h + s * (t.y - h)), this
                }
                add(t) {
                    return this.x = r(this.x + t.x), this.y = r(this.y + t.y), this
                }
                add2f(t, s) {
                    return this.x = r(this.x + t), this.y = r(this.y + s), this
                }
                subtract(t) {
                    return this.x = r(this.x - t.x), this.y = r(this.y - t.y), this
                }
                subtract2f(t, s) {
                    return this.x = r(this.x - t), this.y = r(this.y - s), this
                }
                multiplyScalar(t) {
                    return "object" == typeof t && console.warn("should use Vec2.multiply for vector * vector operation"), this.x = r(this.x * t), this.y = r(this.y * t), this
                }
                multiply(t) {
                    return "object" != typeof t && console.warn("should use Vec2.scale for vector * scalar operation"), this.x = r(this.x * t.x), this.y = r(this.y * t.y), this
                }
                multiply2f(t, s) {
                    return this.x = r(this.x * t), this.y = r(this.y * s), this
                }
                divide(t) {
                    return this.x = r(this.x / t.x), this.y = r(this.y / t.y), this
                }
                divide2f(t, s) {
                    return this.x = r(this.x / t), this.y = r(this.y / s), this
                }
                dot(t) {
                    return r(r(this.x * t.x) + r(this.y * t.y))
                }
                cross(t) {
                    return r(r(this.x * t.y) - r(this.y * t.x))
                }
                length() {
                    return r(Math.sqrt(r(this.x * this.x) + r(this.y * this.y)))
                }
                lengthSqr() {
                    return r(r(this.x * this.x) + r(this.y * this.y))
                }
                normalize() {
                    const t = this.x,
                        s = this.y;
                    let i = r(r(t * t) + r(s * s));
                    return i > 0 && (i = r(1 / r(Math.sqrt(i))), this.x = r(this.x * i), this.y = r(this.y * i)), this
                }
                angle(t) {
                    const s = this.lengthSqr(),
                        i = t.lengthSqr();
                    if (0 === s || 0 === i) return console.warn("Can't get angle between zero vector"), 0;
                    const h = this.dot(t);
                    let e = r(h / r(Math.sqrt(r(s * i))));
                    return e = function(t, s, i) {
                        if (s > i) {
                            const t = s;
                            s = i, i = t
                        }
                        return t < s ? s : t > i ? i : t
                    }(e, -1, 1), r(Math.acos(e))
                }
                signAngle(t) {
                    const s = this.angle(t);
                    return this.cross(t) < 0 ? -s : s
                }
                rotate(t) {
                    const s = this.x,
                        i = this.y,
                        h = r(Math.sin(t)),
                        e = r(Math.cos(t));
                    return this.x = r(r(e * s) - r(h * i)), this.y = r(r(h * s) + r(e * i)), this
                }
                project(t) {
                    const s = r(this.dot(t) / t.dot(t));
                    return this.x = r(t.x * s), this.y = r(t.y * s), this
                }
            }
            t("V2", e), e.ZERO = Object.freeze(new e(0, 0)), e.ONE = Object.freeze(new e(1, 1)), e.NEG_ONE = Object.freeze(new e(-1, -1)), e.UNIT_X = Object.freeze(new e(1, 0)), e.UNIT_Y = Object.freeze(new e(0, 1)), s._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/ValidationUtil.ts", ["cc"], function(t) {
    "use strict";
    var e;
    return {
        setters: [function(t) {
            e = t.cclegacy
        }],
        execute: function() {
            e._RF.push({}, "5f8b8vcd/9OFIZy9Dagj2TB", "ValidationUtil", void 0);
            const i = 9007199254740991;
            t("default", class {
                static isObject(t) {
                    const e = typeof t;
                    return null !== t && ("object" === e || "function" === e)
                }
                static isNumber(t) {
                    return "number" == typeof t || t instanceof Number
                }
                static isString(t) {
                    return "string" == typeof t || t instanceof String
                }
                static isNaN(t) {
                    return this.isNumber(t) && t !== +t
                }
                static isLength(t) {
                    return "number" == typeof t && t > -1 && t % 1 == 0 && t <= i
                }
                static isArrayLike(t) {
                    return null !== t && this.isLength(t.length)
                }
                static eq(t, e) {
                    return t === e || t != t && e != e
                }
                static isEqual(t, e) {
                    if (!(t instanceof Object) || !(e instanceof Object)) return t === e;
                    if (Object.keys(t).length !== Object.keys(e).length) return !1;
                    for (let i in t) {
                        const n = t[i] instanceof Object,
                            s = e[i] instanceof Object;
                        if (n && s) return this.isEqual(t[i], e[i]);
                        if (t[i] !== e[i]) return !1
                    }
                    return !0
                }
                static isIndex(t, e) {
                    const n = typeof t;
                    return !!(e = null === e ? i : e) && ("number" === n || "symbol" !== n && /^(?:0|[1-9]\d*)$/.test(t)) && t > -1 && t % 1 == 0 && t < e
                }
                static isIterateeCall(t, e, i) {
                    if (!this.isObject(i)) return !1;
                    const n = typeof e;
                    return !!("number" === n ? this.isArrayLike(i) && this.isIndex(e, i.length) : "string" === n && e in i) && this.eq(i[e], t)
                }
            }), e._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/VideoView.ts", ["cc", "./PlatformUtil.ts", "./index52.ts", "./BaseView.ts", "./LoginDataCache.ts", "./RoleControl.ts", "./UIDefine.ts"], function(e) {
    "use strict";
    var i, t, o, s, n, d, l;
    return {
        setters: [function(e) {
            i = e.VideoPlayer, t = e.Button, o = e.cclegacy
        }, null, null, function(e) {
            s = e.BaseView
        }, function(e) {
            n = e.LoginDataCache
        }, function(e) {
            d = e.default
        }, function(e) {
            l = e.ViewType
        }],
        execute: function() {
            o._RF.push({}, "8aa24Pe8NtN94SmIxFfOM++", "VideoView", void 0);
            e("default", class extends s {
                constructor() {
                    super(), this.videoName = void 0, this.autoPlay = !0, this.closeCmd = !1, this.video = void 0, this.name = "VideoView", this.url = "ui/module/common/VideoView", this.viewType = l.GuideView, this.poolTime = 0
                }
                onInit() {
                    this.video = this.findChildComponent("video", i);
                    const e = this.findChild("btnSkip");
                    this.addComponentCallbackListener(e, t.EventType.CLICK, (() => {
                        this.closeCmd = !0, IS(d).send_3_30(3, 2)
                    })), this.addComponentCallbackListener(this.video.node, i.EventType.COMPLETED, (() => {
                        IS(d).send_3_30(3, 1), this.close()
                    })), this.loadVideo()
                }
                registerUpdateHandler() {}
                loadVideo() {
                    this.video.resourceType = 0, 0 == GlobalDefine.SERVER_LIST_TYPE ? this.video.remoteURL = "http://172.16.10.228/15_1.mp4" : this.video.remoteURL = "https://xxjzz-cdnres.me4399.com/stable/android_cn/weixin/15_1.mp4", console.log("play here")
                }
                onAfterOpen() {
                    this.videoName = this.openArgs[0], this.autoPlay = this.openArgs[1] ?? !0
                }
                onBeforeClose() {
                    this.closeVideo()
                }
                onDestroy() {
                    this.closeVideo(), IS(n).newRole = 2
                }
                onUpdate(e) {
                    this.closeCmd && (this.closeCmd = !1, this.close())
                }
                playVideo() {
                    this.video.play()
                }
                closeVideo() {
                    this.video.stop()
                }
            }), o._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/VipBannerView.ts", ["cc", "./ItemGrid.ts", "./UIList.ts", "./NodeUtil.ts", "./BaseView.ts", "./ConfigGlobal.ts", "./ChatDataCache.ts", "./ChatDefine.ts", "./PayDataCache.ts"], function(t) {
    "use strict";
    var e, o, i, s, r, n, a, d, h, l, c, p, g, C, m;
    return {
        setters: [function(t) {
            e = t.Button, o = t.ScrollView, i = t.Label, s = t.ProgressBar, r = t.RichText, n = t.js, a = t.cclegacy
        }, function(t) {
            d = t.ItemGrid
        }, function(t) {
            h = t.ListItem
        }, function(t) {
            l = t.default
        }, function(t) {
            c = t.BaseView
        }, function(t) {
            p = t.ConfigGlobal
        }, function(t) {
            g = t.ChatDataCache
        }, function(t) {
            C = t.ChatDefine
        }, function(t) {
            m = t.default
        }],
        execute: function() {
            a._RF.push({}, "f76a3k1EjVA2IYm0Pqf6Ct4", "VipBannerView", void 0);
            t("default", class extends c {
                constructor() {
                    super(), this.chargeInfo = void 0, this.showType = 1, this.tagrgetMoney = 5e3, this.normalNode = void 0, this.preNode = void 0, this.progressValue = void 0, this.openDes = void 0, this.progressBar = void 0, this.gotoBtn = void 0, this.preRewardScroll = void 0, this.normalRewardScroll = void 0, this.gotoRed = void 0, this.name = "VipBannerView", this.url = "ui/module/Vip/VipBannerView"
                }
                onInit() {
                    const t = this.findChild("imgMask");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const n = this.findChild("btnClose");
                    this.addComponentCallbackListener(n, e.EventType.CLICK, (() => {
                        this.close()
                    })), this.preNode = this.findChild("root/preNode"), this.preRewardScroll = this.addUIList(this.findChildComponent("root/preNode/rewardScroll", o), f), this.preRewardScroll.lackCenter = !0, this.progressValue = this.findChildComponent("root/preNode/progressValue", i), this.progressBar = this.findChildComponent("root/preNode/ProgressBar", s), this.openDes = this.findChildComponent("root/preNode/openDes", r), this.normalNode = this.findChild("root/NormalNode"), this.normalRewardScroll = this.addUIList(this.findChildComponent("root/NormalNode/rewardScroll", o), f), this.normalRewardScroll.lackCenter = !0, this.gotoBtn = this.findChild("root/NormalNode/gotoBtn"), this.gotoRed = this.findChild("root/NormalNode/gotoBtn/red"), this.addComponentCallbackListener(this.gotoBtn, e.EventType.CLICK, (() => {
                        uiMgr.openView("ChatView", C.ViewType.Private, null, null, 2), this.close()
                    }))
                }
                onAfterOpen() {
                    this.showType = IS(g).GetVipBtnShowState(), this.chargeInfo = IS(m).GetRechargeInfo();
                    let t = IS(g).GetGmOpenInfo();
                    this.tagrgetMoney = t.open_money, this.ShowPreNode(), this.ShowNormalNode(), IS(g).ClickVipRed()
                }
                ShowPreNode() {
                    1 == this.showType ? (this.preNode.active = !0, this.openDes.string = n.formatStr(GetLanguage(200626), this.tagrgetMoney), this.progressValue.string = n.formatStr(GetLanguage(200627), this.chargeInfo.total_money, this.tagrgetMoney), this.progressBar.progress = this.chargeInfo.total_money / this.tagrgetMoney, this.preRewardScroll.datas = p.vip_reward_show) : this.preNode.active = !1
                }
                ShowNormalNode() {
                    2 == this.showType ? (this.normalNode.active = !0, this.normalRewardScroll.datas = p.vip_identify_reward, this.gotoRed.active = IS(g).GetVipBtnRed() >= 1) : this.normalNode.active = !1
                }
                onBeforeClose() {}
                registerUpdateHandler() {}
                onDestroy() {}
            });
            class f extends h {
                constructor(...t) {
                    super(...t), this.itemGridNode = void 0, this.itemGrid = void 0
                }
                onInit() {
                    this.itemGridNode = l.findChild(this.node, "itemGrid"), this.itemGrid = new d(this.view, this.itemGridNode)
                }
                onRender(t, e) {
                    this.itemGrid.SetItemId(t[0], t[1])
                }
            }
            a._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WaitForSeconds.ts", ["cc", "./ObjectPool.ts", "./ObjectUtil.ts"], function(e) {
    "use strict";
    var t, c, r;
    return {
        setters: [function(e) {
            t = e.cclegacy
        }, function(e) {
            c = e.ObjectPool
        }, function(e) {
            r = e.default
        }],
        execute: function() {
            t._RF.push({}, "4e718uIm4RGa4mIme7V6hrh", "WaitForSeconds", void 0);
            class s {
                constructor() {
                    this._currenTime = void 0
                }
                get waitDone() {
                    return this._currenTime <= 0
                }
                static alloc(e) {
                    const t = i.alloc();
                    return t._currenTime = e, t
                }
                static free(e) {
                    i.free(e)
                }
                update(e) {
                    this._currenTime -= e
                }
                dispose() {
                    this._currenTime = 0, s.free(this)
                }
            }
            e("WaitForSeconds", s), r.setClassName(s, "IWaitCoroutine");
            const i = new c(s, 50);
            t._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WeeklyCardControl.ts", ["cc", "./ActivityDataCache.ts", "./ActivityDefine.ts", "./WeeklyCardDataCache.ts", "./WeeklyCardDefine.ts"], function(e) {
    "use strict";
    var t, a, n, r, i, c, d;
    return {
        setters: [function(e) {
            t = e.cclegacy
        }, function(e) {
            a = e.default
        }, function(e) {
            n = e.ActivityEventDefine, r = e.ActivityType, i = e.ActivityState
        }, function(e) {
            c = e.default
        }, function(e) {
            d = e.WeeklyCardEventDefine
        }],
        execute: function() {
            t._RF.push({}, "d7c53ZZE0RD56yUbP61Pzqj", "WeeklyCardControl", void 0);
            e("default", class {
                clear() {}
                constructor() {
                    netManager.addEventListener("act.act_week_card_info_s2c", this.update_24_87, this), netManager.addEventListener("act.act_week_card_reward_s2c", this.update_24_88, this), normalEvent.on(n.OnActivityListUpdate, this.activityChange, this), normalEvent.on(n.OnActivityInfoUpdate, this.activityChange, this)
                }
                activityChange(e = null) {
                    if (e && e.type != r.WeeklyCard) return;
                    const t = IS(a).GetActivityInfo(r.WeeklyCard);
                    t && t.state == i.Open && (IS(c).updateActivityInfo(), this.reqWeeklyCardInfo())
                }
                reqWeeklyCardInfo() {
                    netManager.send("act.act_week_card_info_c2s", {})
                }
                update_24_87(e) {
                    IS(c).isCardBuyed = 1 == e.is_buy, IS(c).rewardGainRecord = [];
                    for (const t of e.status_list) IS(c).rewardGainRecord[t.k] = t.v;
                    for (let e = 0; e < IS(c).weeklycardInfo.length; e++) null == IS(c).rewardGainRecord[IS(c).weeklycardInfo[e].id] && (IS(c).rewardGainRecord[IS(c).weeklycardInfo[e].id] = 0);
                    normalEvent.emit(d.WEEKLYCARD_UPDATE_LIST), IS(a).UpdateMainRedByActType(r.WeeklyCard)
                }
                reqWeeklyCardReward(e) {
                    netManager.send("act.act_week_card_reward_c2s", {
                        reward_id: e
                    })
                }
                update_24_88(e) {
                    this.reqWeeklyCardInfo()
                }
            }), t._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WeeklyCardDataCache.ts", ["cc", "./TimeUtil.ts", "./ActivityDataCache.ts", "./ActivityDefine.ts"], function(t) {
    "use strict";
    var e, i, a, r, c, n;
    return {
        setters: [function(t) {
            e = t.cclegacy
        }, function(t) {
            i = t.default
        }, function(t) {
            a = t.default
        }, function(t) {
            r = t.ActivityEventDefine, c = t.ActivityType, n = t.ActivityState
        }],
        execute: function() {
            e._RF.push({}, "44428uSFxdNvbrMQbWocSvi", "WeeklyCardDataCache", void 0);
            t("default", class {
                clear() {}
                constructor() {
                    this.isCardBuyed = !1, this.rewardGainRecord = void 0, this.payMallInfo = void 0, this.weeklycardRedPoint = 0, this.weeklycardDay = 0, this.weeklycardInfo = void 0, this.round = void 0, this.curRewardInfo = void 0, this.totalRewardInfo = void 0, normalEvent.on(r.OnActivityListUpdate, this.updateActivityInfo, this)
                }
                updateActivityInfo() {
                    if (this.weeklycardInfo = [], !IS(a).GetActivityInfo(c.WeeklyCard)) return;
                    this.round = IS(a).GetActivityInfo(c.WeeklyCard).round;
                    let t = configWeekly_card.getDatas();
                    for (const e of t) 1 == e.act_group && this.weeklycardInfo.push(e)
                }
                getRedNum() {
                    if (!this.isCardBuyed) return 0;
                    if (!this.weeklycardInfo) return 0;
                    const t = IS(a).GetActivityInfo(c.WeeklyCard),
                        e = t.state_time[t.state] ?? t.state_time[n.Open];
                    let r = i.serverTime - e.start_time;
                    this.weeklycardDay = Math.ceil(r / 86400);
                    for (const t of this.weeklycardInfo) {
                        const e = t.day <= this.weeklycardDay,
                            i = this.rewardGainRecord[t.id];
                        if (e && 2 != i) return 1
                    }
                    return 0
                }
            }), e._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WeeklyCardDefine.ts", ["cc"], function(e) {
    "use strict";
    var t;
    return {
        setters: [function(e) {
            t = e.cclegacy
        }],
        execute: function() {
            t._RF.push({}, "b46c1JnOV1Gx6SNgVu8CLQx", "WeeklyCardDefine", void 0);
            e("WeeklyCardEventDefine", {
                WEEKLYCARD_UPDATE_LIST: "WEEKLYCARD_UPDATE_LIST"
            });
            t._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WeeklyCardGainInfoView.ts", ["cc", "./ItemGrid.ts", "./UIList.ts", "./NodeUtil.ts", "./index52.ts", "./PayDataCache.ts", "./WeeklyCardDataCache.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var e, i, n, s, d, o, a, r, l, c;
    return {
        setters: [function(t) {
            e = t.Button, i = t.ScrollView, n = t.Label, s = t.cclegacy
        }, function(t) {
            d = t.ItemGrid
        }, function(t) {
            o = t.ListItem
        }, function(t) {
            a = t.default
        }, null, function(t) {
            r = t.default
        }, function(t) {
            l = t.default
        }, function(t) {
            c = t.BaseView
        }],
        execute: function() {
            s._RF.push({}, "f8241eZmipAwKb0gtcSkP7Q", "WeeklyCardGainInfoView", void 0);
            t("default", class extends c {
                constructor() {
                    super(), this.curRewardList = void 0, this.totalRewardList = void 0, this.btnBuy = void 0, this.name = "WeeklyCardGainInfoView", this.url = "ui/module/weeklycard/WeeklyCardGainInfoView"
                }
                onInit() {
                    const t = this.findChild("imgMask");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const n = this.findChildComponent("content/nodeCurReward/rewardScroll", i);
                    this.curRewardList = this.addUIList(n, h);
                    const s = this.findChildComponent("content/nodeTotalReward/rewardScroll", i);
                    this.totalRewardList = this.addUIList(s, h), this.btnBuy = this.findChild("content/btnBuy"), this.addComponentCallbackListener(this.btnBuy, e.EventType.CLICK, (() => {
                        IS(l).payMallInfo.id && (IS(r).Pay(IS(l).payMallInfo.id), this.close())
                    }))
                }
                registerUpdateHandler() {}
                onAfterOpen() {
                    this.curRewardList.datas = IS(l).curRewardInfo, this.totalRewardList.datas = IS(l).totalRewardInfo, this.btnBuy.getChildByName("Label").getComponent(n).string = IS(r).GetPriceString(IS(l).payMallInfo.cost_level)
                }
                onBeforeClose() {}
                onDestroy() {}
            });
            class h extends o {
                constructor(...t) {
                    super(...t), this.itemGridNode = void 0, this.itemGrid = void 0
                }
                onInit() {
                    this.itemGridNode = a.findChild(this.node, "itemGrid"), this.itemGrid = new d(this.view, this.itemGridNode)
                }
                onRender(t, e) {
                    this.itemGrid.SetItemId(t[0], t[1])
                }
            }
            s._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WeeklyCardView.ts", ["cc", "./ItemGrid.ts", "./UIList.ts", "./NodeUtil.ts", "./TimeUtil.ts", "./index52.ts", "./ActivityDataCache.ts", "./ActivityDefine.ts", "./MessageView.ts", "./PayDataCache.ts", "./PayDefine.ts", "./WeeklyCardControl.ts", "./WeeklyCardDataCache.ts", "./WeeklyCardDefine.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var e, i, a, n, d, s, r, o, l, h, f, c, I, y, u, m, C, w, S;
    return {
        setters: [function(t) {
            e = t.Button, i = t.Label, a = t.ScrollView, n = t.cclegacy, d = t.js
        }, function(t) {
            s = t.ItemGrid
        }, function(t) {
            r = t.ListItem
        }, function(t) {
            o = t.default
        }, function(t) {
            l = t.default
        }, null, function(t) {
            h = t.default
        }, function(t) {
            f = t.ActivityType, c = t.ActivityState
        }, function(t) {
            I = t.default
        }, function(t) {
            y = t.default
        }, function(t) {
            u = t.GiftType
        }, function(t) {
            m = t.default
        }, function(t) {
            C = t.default
        }, function(t) {
            w = t.WeeklyCardEventDefine
        }, function(t) {
            S = t.BaseView
        }],
        execute: function() {
            n._RF.push({}, "d8411Wk9EpPgYPErhOXxOVN", "WeeklyCardView", void 0);
            t("default", class extends S {
                constructor() {
                    super(), this.txtLeftTime = void 0, this.rewardList = void 0, this.deltaTime = 0, this.leftTime = 0, this.canUpdate = !1, this.btnBuy = void 0, this.name = "WeeklyCardView", this.url = "ui/module/weeklycard/WeeklyCardView"
                }
                onInit() {
                    const t = this.findChild("imgMask");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const n = this.findChild("btnClose");
                    this.addComponentCallbackListener(n, e.EventType.CLICK, (() => {
                        this.close()
                    })), this.txtLeftTime = this.findChildComponent("container/topBg/txtLeftTime", i);
                    const d = this.findChildComponent("container/rewardList", a);
                    this.rewardList = this.addUIList(d, p, !0), this.btnBuy = this.findChild("container/nodeBuy/btnBuy"), this.addComponentCallbackListener(this.btnBuy, e.EventType.CLICK, (() => {
                        if (IS(C).payMallInfo.id) {
                            const t = IS(y).GetPayGiftInfo(IS(C).payMallInfo.id);
                            if (t.bought_times >= t.payCfg.buy_times) return void I.showFlyTip(GetLanguage(200027));
                            IS(y).Pay(IS(C).payMallInfo.id)
                        }
                    }))
                }
                registerUpdateHandler() {
                    this.addEvent(w.WEEKLYCARD_UPDATE_LIST, this.UpdateRewardList, this)
                }
                onAfterOpen() {
                    IS(C).updateActivityInfo(), IS(m).reqWeeklyCardInfo(), this.UpdateTime()
                }
                onBeforeClose() {
                    this.canUpdate = !1
                }
                onDestroy() {}
                onUpdate(t) {
                    this.canUpdate && (this.deltaTime = this.deltaTime + t, this.deltaTime >= 1 && (this.deltaTime = 0, this.leftTime = this.leftTime - 1, this.leftTime > 0 ? this.txtLeftTime.string = l.formatTimeStringForSecond(this.leftTime) : (this.txtLeftTime.string = GetLanguage(200026), this.canUpdate = !1)))
                }
                UpdateTime() {
                    const t = IS(h).GetActivityInfo(f.WeeklyCard),
                        e = t.state_time[t.state] ?? t.state_time[c.Open];
                    let i = l.serverTime - e.start_time;
                    IS(C).weeklycardDay = Math.ceil(i / 86400), this.leftTime = e.end_time - l.serverTime, this.leftTime > 0 ? (this.canUpdate = !0, this.txtLeftTime.string = l.formatTimeStringForSecond(this.leftTime)) : this.txtLeftTime.string = GetLanguage(200026)
                }
                UpdateRewardList() {
                    this.btnBuy.getChildByName("imgGrey").active = IS(C).isCardBuyed, this.btnBuy.getChildByName("txtBuy1").active = !IS(C).isCardBuyed, this.btnBuy.getChildByName("txtBuy2").active = IS(C).isCardBuyed, IS(C).payMallInfo = IS(y).GetAcivityGift(u.WeeklyCard, f.WeeklyCard, IS(C).round)[0], this.btnBuy.getChildByName("txtBuy1").getComponent(i).string = IS(y).GetPriceString(IS(C).payMallInfo.cost_level);
                    let t = [];
                    IS(C).curRewardInfo = [], IS(C).totalRewardInfo = [];
                    for (let e = 0; e < IS(C).weeklycardInfo.length; e++) {
                        IS(C).weeklycardInfo[e].day <= IS(C).weeklycardDay && this.CalculateReward(IS(C).weeklycardInfo[e].reward, 1);
                        let i = {
                            id: IS(C).weeklycardInfo[e].id,
                            active: IS(C).weeklycardInfo[e].day <= IS(C).weeklycardDay,
                            rewardList: IS(C).weeklycardInfo[e].reward,
                            isGet: IS(C).rewardGainRecord[IS(C).weeklycardInfo[e].id]
                        };
                        this.CalculateReward(IS(C).weeklycardInfo[e].reward, 2), t.push(i)
                    }
                    IS(C).curRewardInfo.filter(Boolean), IS(C).totalRewardInfo.filter(Boolean), this.RewriteRewardList(), this.rewardList.datas = t
                }
                CalculateReward(t, e) {
                    if (1 == e)
                        for (const e of t) null != IS(C).curRewardInfo[e[0]] ? IS(C).curRewardInfo[e[0]] += e[1] : IS(C).curRewardInfo[e[0]] = e[1];
                    if (2 == e)
                        for (const e of t) null != IS(C).totalRewardInfo[e[0]] ? IS(C).totalRewardInfo[e[0]] += e[1] : IS(C).totalRewardInfo[e[0]] = e[1]
                }
                RewriteRewardList() {
                    let t = [],
                        e = [],
                        i = 0,
                        a = 0;
                    for (let e = 0; e < IS(C).curRewardInfo.length; e++) IS(C).curRewardInfo[e] && (t[i] = [e, IS(C).curRewardInfo[e]], i++);
                    for (let t = 0; t < IS(C).totalRewardInfo.length; t++) IS(C).totalRewardInfo[t] && (e[a] = [t, IS(C).totalRewardInfo[t]], a++);
                    IS(C).curRewardInfo = t, IS(C).totalRewardInfo = e
                }
            });
            class p extends r {
                constructor(...t) {
                    super(...t), this.id = void 0, this.txtTitle = void 0, this.goodsList = void 0, this.btnGet = void 0, this.txtHint = void 0
                }
                onInit() {
                    this.txtTitle = o.findChildComponent(this.node, "title/txtTitle", i);
                    const t = o.findChildComponent(this.node, "rewardScroll", a);
                    this.goodsList = this.view.addUIList(t, v, !0), this.btnGet = o.findChild(this.node, "btnGet"), this.txtHint = o.findChild(this.node, "txtHint"), this.view.addComponentCallbackListener(this.btnGet, e.EventType.CLICK, (() => {
                        IS(C).isCardBuyed ? IS(m).reqWeeklyCardReward(this.id) : uiMgr.openView("WeeklyCardGainInfoView")
                    }))
                }
                onRender(t, e) {
                    this.id = t.id, this.btnGet.active = t.active, this.txtHint.active = !t.active, this.goodsList.datas = t.rewardList, this.txtTitle.string = d.formatStr(GetLanguage(400004), IS(C).weeklycardInfo[e].day), this.btnGet.getChildByName("imgGrey").active = 2 == t.isGet, this.btnGet.getChildByName("txtGet1").active = 2 != t.isGet, this.btnGet.getChildByName("txtGet2").active = 2 == t.isGet, this.btnGet.getChildByName("red").active = 2 != t.isGet && IS(C).isCardBuyed
                }
            }
            class v extends r {
                constructor(...t) {
                    super(...t), this.itemGridNode = void 0, this.itemGrid = void 0
                }
                onInit() {
                    this.itemGridNode = o.findChild(this.node, "itemGrid"), this.itemGrid = new s(this.view, this.itemGridNode)
                }
                onRender(t, e) {
                    this.itemGrid.SetItemId(t[0], t[1])
                }
            }
            n._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WelfareBindView.ts", ["cc", "./ItemGrid.ts", "./UIList.ts", "./NodeUtil.ts", "./index52.ts", "./ConfigGlobal.ts", "./MessageView.ts", "./LoginDataCache.ts", "./NativeToJs.ts", "./WelfareControl.ts", "./WelfareDataCache.ts", "./WelfareDefine.ts", "./BaseSubView.ts"], function(t) {
    "use strict";
    var i, e, n, d, s, a, r, o, h, l, c, w, f;
    return {
        setters: [function(t) {
            i = t.ScrollView, e = t.Button, n = t.sys, d = t.cclegacy
        }, function(t) {
            s = t.ItemGrid
        }, function(t) {
            a = t.ListItem
        }, function(t) {
            r = t.default
        }, null, function(t) {
            o = t.ConfigGlobal
        }, null, null, function(t) {
            h = t.NativeToJs
        }, function(t) {
            l = t.default
        }, function(t) {
            c = t.WelfareDataCache
        }, function(t) {
            w = t.WelfareEvent
        }, function(t) {
            f = t.BaseSubView
        }],
        execute: function() {
            d._RF.push({}, "488caj+CAxDE4ET21UjVhCS", "WelfareBindView", void 0);
            t("default", class extends f {
                constructor() {
                    super(), this.imgGrey = void 0, this.txtReward1 = void 0, this.txtReward2 = void 0, this.rewardList = void 0, this.btnReward = void 0, this.btnBind = void 0, this.nodeApple = void 0, this.node4399 = void 0, this.redPointReward = void 0, this.redPointBind = void 0, this.name = "WelfareBindView", this.url = "ui/module/welfare/WelfareBindView"
                }
                onInit() {
                    this.imgGrey = this.findChild("btnReward/imgGrey"), this.txtReward1 = this.findChild("btnReward/txtReward1"), this.txtReward2 = this.findChild("btnReward/txtReward2"), this.rewardList = this.addUIList(this.findChildComponent("content/nodeReward/RewardScroll", i), v), this.rewardList.lackCenter = !0, this.nodeApple = this.findChild("content/nodePlatform/apple"), this.node4399 = this.findChild("content/nodePlatform/4399"), this.btnReward = this.findChild("btnReward"), this.addComponentCallbackListener(this.btnReward, e.EventType.CLICK, (() => {
                        this.imgGrey.active || IS(l).reqBindReward()
                    })), this.redPointReward = this.findChild("btnReward/RedPoint"), this.btnBind = this.findChild("btnBind"), this.addComponentCallbackListener(this.btnBind, e.EventType.CLICK, (() => {
                        h.bindTempAccount()
                    })), this.redPointBind = this.findChild("btnBind/RedPoint");
                    const t = this.findChild("btnClose");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        uiMgr.close("MenuView"), uiMgr.close("WelfareCenterView")
                    }))
                }
                registerUpdateHandler() {
                    this.addEvent(w.BIND_INFO_UPDATE, this.updateInfo, this), this.addEvent(w.WELFARE_BIND_CALLBACK, this.onBindCallback, this)
                }
                onAfterOpen() {
                    IS(l).reqBindInfo(), this.rewardList.datas = o.account_bind_reward, this.nodeApple.active = n.os == n.OS.IOS, this.node4399.active = n.os != n.OS.IOS
                }
                onBeforeClose() {}
                onDestroy() {}
                updateInfo() {
                    IS(c).bindState > 0 && 0 == IS(c).rewardState ? (IS(c).bindRedPoint = 1, this.redPointReward.active = !0, this.btnReward.getComponent(e).interactable = !0, this.btnReward.active = !0, this.btnBind.active = !1, this.imgGrey.active = !1, this.txtReward1.active = !0, this.txtReward2.active = !1) : IS(c).bindState > 0 && 1 == IS(c).rewardState ? (IS(c).bindRedPoint = 0, this.redPointReward.active = !1, this.btnReward.getComponent(e).interactable = !1, this.btnReward.active = !0, this.btnBind.active = !1, this.imgGrey.active = !0, this.txtReward1.active = !1, this.txtReward2.active = !0) : (IS(c).bindRedPoint = 1, this.redPointBind.active = !0, this.btnReward.active = !1, this.btnBind.active = !0, this.imgGrey.active = !0, this.txtReward1.active = !0, this.txtReward2.active = !1), IS(c).updateRedPoint()
                }
                onBindCallback(t = 0) {
                    1 == t && IS(l).reqBindInfo()
                }
            });
            class v extends a {
                constructor(...t) {
                    super(...t), this.itemGridNode = void 0, this.itemGrid = void 0
                }
                onInit() {
                    this.itemGridNode = r.findChild(this.node, "itemGrid"), this.itemGrid = new s(this.view, this.itemGridNode)
                }
                onRender(t, i) {
                    this.itemGrid.SetItemId(t[0], t[1])
                }
            }
            d._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WelfareCenterView.ts", ["cc", "./index52.ts", "./ChatDataCache.ts", "./WelfareDataCache.ts", "./WelfareDefine.ts", "./BaseTabView.ts", "./UIDefine.ts"], function(e) {
    "use strict";
    var t, a, n, i, s, r;
    return {
        setters: [function(e) {
            t = e.cclegacy
        }, null, function(e) {
            a = e.ChatDataCache
        }, function(e) {
            n = e.WelfareDataCache
        }, function(e) {
            i = e.WelfareEvent
        }, function(e) {
            s = e.BaseTabView
        }, function(e) {
            r = e.PanelTabType
        }],
        execute: function() {
            t._RF.push({}, "7d8c6QkMcdJI7e8pJ/H/YvG", "WelfareCenterView", void 0);
            e("default", class extends s {
                constructor() {
                    super(), this.name = "WelfareCenterView", this.url = "ui/module/welfare/WelfareCenterView", this.UpdateTabType()
                }
                trySetDefaultOpenTab() {
                    this.openType = r.Welfare_Share, this.tabTypes.includes(this.openType) || (this.openType = r.Welfare_Bind)
                }
                registerUpdateHandler() {
                    this.addEvent(i.WELFARE_RED_UPDATE, this.UpdateTabRed), this.addEvent(i.WELFARE_VIP_UPDATE, this.UpdateTabType)
                }
                onAfterOpenTab() {
                    this.UpdateTabRed()
                }
                UpdateTabRed() {
                    this.setRedPoint(r.Welfare_Bind, IS(n).bindRedPoint), this.setRedPoint(r.Welfare_Share, IS(n).fbRedPoint), IS(a).GetGmOpenInfo().is_open && this.setRedPoint(r.Welfare_VIP, IS(n).VIPRedPoint)
                }
                UpdateTabType() {
                    IS(a).GetGmOpenInfo().is_open ? this.tabTypes = [r.Welfare_Share, r.Welfare_Bind, r.Welfare_VIP] : this.tabTypes = [r.Welfare_Share, r.Welfare_Bind], this.trySetDefaultOpenTab()
                }
            }), t._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WelfareControl.ts", ["cc", "./GameSetting.ts", "./ControlMgr.ts", "./LoginDataCache.ts", "./WelfareDataCache.ts", "./WelfareDefine.ts"], function(e) {
    "use strict";
    var a, r, t, n, o, _, i;
    return {
        setters: [function(e) {
            a = e.cclegacy
        }, function(e) {
            r = e.default, t = e.GameSettingKey
        }, function(e) {
            n = e.controlMgr
        }, function(e) {
            o = e.LoginDataCache
        }, function(e) {
            _ = e.WelfareDataCache
        }, function(e) {
            i = e.WelfareEvent
        }],
        execute: function() {
            a._RF.push({}, "e748c7Ush9LVqwzFDV6m8wA", "WelfareControl", void 0);
            class d {
                clear() {}
                constructor() {
                    netManager.addEventListener("operate.operate_acc_bind_info_s2c", this.on_operate_acc_bind_info_s2c, this), netManager.addEventListener("operate.operate_acc_bind_reward_s2c", this.on_operate_acc_bind_reward_s2c, this), netManager.addEventListener("operate.operate_facebook_info_s2c", this.on_operate_facebook_info_s2c, this), netManager.addEventListener("operate.operate_facebook_share_reward_s2c", this.on_operate_facebook_share_reward_s2c, this), netManager.addEventListener("operate.operate_facebook_like_reward_s2c", this.on_operate_facebook_like_reward_s2c, this), n.addControl(this)
                }
                onLogin() {
                    IS(d).reqFbRewardInfo(), IS(d).reqBindInfo(), IS(_).updateRedPoint()
                }
                onReconnect() {}
                reqFbRewardInfo() {
                    netManager.send("operate.operate_facebook_info_c2s", {})
                }
                on_operate_facebook_info_s2c(e) {
                    const a = IS(_);
                    a.fbShareReward = e.share_reward, a.fbLikeReward = e.like_reward, 1 == e.share_reward && (a.shareRedPoint = 1), 1 == e.like_reward && (a.likeRedPoint = 1), 0 == IS(r).Get(t.FACEBOOK_SHARE) && (IS(_).shareRedPoint = 1), IS(_).updateRedPoint(), normalEvent.emit(i.FB_REWARD_UPDATE)
                }
                sendFbShareReward(e) {
                    netManager.send("operate.operate_facebook_share_reward_c2s", {
                        type: e
                    })
                }
                on_operate_facebook_share_reward_s2c(e) {
                    const a = IS(_);
                    a.fbShareReward = e.share_reward, 1 == e.share_reward && (a.shareRedPoint = 1), IS(_).updateRedPoint(), normalEvent.emit(i.FB_REWARD_UPDATE)
                }
                sendFbLikeReward(e) {
                    netManager.send("operate.operate_facebook_like_reward_c2s", {
                        type: e
                    })
                }
                on_operate_facebook_like_reward_s2c(e) {
                    const a = IS(_);
                    a.fbLikeReward = e.like_reward, 1 == e.like_reward && (a.likeRedPoint = 1), IS(_).updateRedPoint(), normalEvent.emit(i.FB_REWARD_UPDATE)
                }
                reqBindInfo() {
                    let e = {
                        client_id: IS(o).fngid
                    };
                    netManager.send("operate.operate_acc_bind_info_c2s", e)
                }
                on_operate_acc_bind_info_s2c(e) {
                    const a = IS(_);
                    a.bindState = e.bind_state, a.rewardState = e.reward_state, 0 == e.reward_state && (a.bindRedPoint = 1), IS(_).updateRedPoint(), normalEvent.emit(i.BIND_INFO_UPDATE)
                }
                reqBindReward() {
                    netManager.send("operate.operate_acc_bind_reward_c2s", {})
                }
                on_operate_acc_bind_reward_s2c(e) {
                    this.reqBindInfo()
                }
            }
            e("default", d), a._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WelfareDataCache.ts", ["cc", "./RedPointMgr.ts", "./WelfareDefine.ts"], function(t) {
    "use strict";
    var e, i, n;
    return {
        setters: [function(t) {
            e = t.cclegacy
        }, function(t) {
            i = t.RedPointMgr
        }, function(t) {
            n = t.WelfareEvent
        }],
        execute: function() {
            e._RF.push({}, "5f935k1JAhDj6+HZ5m2AOn1", "WelfareDataCache", void 0);
            t("WelfareDataCache", class {
                constructor() {
                    this.bindState = 0, this.rewardState = 0, this.fbShareReward = 0, this.fbLikeReward = 0, this.bindRedPoint = 0, this.shareRedPoint = 0, this.likeRedPoint = 0, this.fbRedPoint = 0, this.VIPRedPoint = 0
                }
                clear() {}
                updateRedPoint() {
                    this.fbRedPoint = this.shareRedPoint + this.likeRedPoint > 0 ? 1 : 0, IS(i).changeValue("Welfare_Redpoint", this.bindRedPoint + this.fbRedPoint + this.VIPRedPoint), normalEvent.emit(n.WELFARE_RED_UPDATE)
                }
                GetRedPoint() {
                    return this.bindRedPoint + this.fbRedPoint + this.VIPRedPoint > 0 ? 1 : 0
                }
            }), e._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WelfareDefine.ts", ["cc"], function(E) {
    "use strict";
    var A;
    return {
        setters: [function(E) {
            A = E.cclegacy
        }],
        execute: function() {
            A._RF.push({}, "77a48+gX8BJaLUMTia1cq7n", "WelfareDefine", void 0);
            E("WelfareEvent", {
                BIND_INFO_UPDATE: "BIND_INFO_UPDATE",
                FB_REWARD_UPDATE: "FB_REWARD_UPDATE",
                WELFARE_RED_UPDATE: "WELFARE_RED_UPDATE",
                WELFARE_BIND_CALLBACK: "WELFARE_BIND_CALLBACK",
                WELFARE_SHARE_CALLBACK: "WELFARE_SHARE_CALLBACK",
                WELFARE_LIKE_CALLBACK: "WELFARE_LIKE_CALLBACK",
                WELFARE_VIP_UPDATE: "WELFARE_VIP_UPDATE"
            });
            A._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WelfareShareView.ts", ["cc", "./ItemGrid.ts", "./UIList.ts", "./NodeUtil.ts", "./index52.ts", "./ConfigGlobal.ts", "./GameSetting.ts", "./NativeToJs.ts", "./WelfareControl.ts", "./WelfareDataCache.ts", "./WelfareDefine.ts", "./BaseSubView.ts"], function(t) {
    "use strict";
    var e, i, n, a, d, r, o, s, h, l, w, c, R, v;
    return {
        setters: [function(t) {
            e = t.ScrollView, i = t.Button, n = t.cclegacy
        }, function(t) {
            a = t.ItemGrid
        }, function(t) {
            d = t.ListItem
        }, function(t) {
            r = t.default
        }, null, function(t) {
            o = t.ConfigGlobal
        }, function(t) {
            s = t.default, h = t.GameSettingKey
        }, function(t) {
            l = t.NativeToJs
        }, function(t) {
            w = t.default
        }, function(t) {
            c = t.WelfareDataCache
        }, function(t) {
            R = t.WelfareEvent
        }, function(t) {
            v = t.BaseSubView
        }],
        execute: function() {
            n._RF.push({}, "12471LMVNhN4bVNoryiHdt7", "WelfareShareView", void 0);
            t("default", class extends v {
                constructor() {
                    super(), this.rewardList1 = void 0, this.rewardList2 = void 0, this.btnShare = void 0, this.btnLike = void 0, this.imgGrey1 = void 0, this.imgYellow1 = void 0, this.txtReward1_0 = void 0, this.txtReward1_1 = void 0, this.txtReward1_2 = void 0, this.imgGrey2 = void 0, this.imgYellow2 = void 0, this.txtReward2_0 = void 0, this.txtReward2_1 = void 0, this.txtReward2_2 = void 0, this.redPoint1 = void 0, this.redPoint2 = void 0, this.item2 = void 0, this.name = "WelfareShareView", this.url = "ui/module/welfare/WelfareShareView"
                }
                onInit() {
                    this.rewardList1 = this.addUIList(this.findChildComponent("content/ScrollView/view/content/item1/nodeReward/RewardScroll", e), S), this.rewardList1.lackCenter = !0, this.rewardList2 = this.addUIList(this.findChildComponent("content/ScrollView/view/content/item2/nodeReward/RewardScroll", e), S), this.rewardList2.lackCenter = !0, this.item2 = this.findChild("content/ScrollView/view/content/item2"), this.imgGrey1 = this.findChild("content/ScrollView/view/content/item1/btnReward/imgGrey"), this.imgYellow1 = this.findChild("content/ScrollView/view/content/item1/btnReward/imgYellow"), this.txtReward1_0 = this.findChild("content/ScrollView/view/content/item1/btnReward/txtReward0"), this.txtReward1_1 = this.findChild("content/ScrollView/view/content/item1/btnReward/txtReward1"), this.txtReward1_2 = this.findChild("content/ScrollView/view/content/item1/btnReward/txtReward2"), this.redPoint1 = this.findChild("content/ScrollView/view/content/item1/btnReward/RedPoint"), this.imgGrey2 = this.findChild("content/ScrollView/view/content/item2/btnReward/imgGrey"), this.imgYellow2 = this.findChild("content/ScrollView/view/content/item2/btnReward/imgYellow"), this.txtReward2_0 = this.findChild("content/ScrollView/view/content/item2/btnReward/txtReward0"), this.txtReward2_1 = this.findChild("content/ScrollView/view/content/item2/btnReward/txtReward1"), this.txtReward2_2 = this.findChild("content/ScrollView/view/content/item2/btnReward/txtReward2"), this.redPoint2 = this.findChild("content/ScrollView/view/content/item2/btnReward/RedPoint"), this.btnShare = this.findChild("content/ScrollView/view/content/item1/btnReward"), this.addComponentCallbackListener(this.btnShare, i.EventType.CLICK, (() => {
                        l.fbShowShareDialog(), 1 == IS(c).fbShareReward && IS(w).sendFbShareReward(2), this.updateInfo()
                    })), this.btnLike = this.findChild("content/ScrollView/view/content/item2/btnReward"), this.addComponentCallbackListener(this.btnLike, i.EventType.CLICK, (() => {
                        0 == IS(c).fbLikeReward ? l.fbShowLikeDialog() : 1 == IS(c).fbLikeReward && IS(w).sendFbLikeReward(2)
                    }));
                    const t = this.findChild("btnClose");
                    this.addComponentCallbackListener(t, i.EventType.CLICK, (() => {
                        uiMgr.close("MenuView"), uiMgr.close("WelfareCenterView")
                    }))
                }
                registerUpdateHandler() {
                    this.addEvent(R.FB_REWARD_UPDATE, this.updateInfo, this), this.addEvent(R.WELFARE_SHARE_CALLBACK, this.onShareComplete, this), this.addEvent(R.WELFARE_LIKE_CALLBACK, this.onLikeComplete, this)
                }
                onAfterOpen() {
                    IS(w).reqFbRewardInfo(), this.rewardList1.datas = o.facebook_daily_share, this.rewardList2.datas = o.facebook_like_reward
                }
                onBeforeClose() {
                    IS(s).set(h.FACEBOOK_SHARE, 1)
                }
                onDestroy() {}
                updateInfo() {
                    IS(c).fbShareReward, 0 == IS(c).fbShareReward ? (0 == IS(s).Get(h.FACEBOOK_SHARE) ? (IS(c).shareRedPoint = 1, this.redPoint1.active = !0) : (IS(c).shareRedPoint = 0, this.redPoint1.active = !1), this.btnShare.getComponent(i).interactable = !0, this.imgGrey1.active = !1, this.imgYellow1.active = !0, this.txtReward1_0.active = !0, this.txtReward1_1.active = !1, this.txtReward1_2.active = !1) : 1 == IS(c).fbShareReward ? (IS(c).shareRedPoint = 1, this.redPoint1.active = !0, this.btnShare.getComponent(i).interactable = !0, this.imgGrey1.active = !1, this.imgYellow1.active = !1, this.txtReward1_0.active = !1, this.txtReward1_1.active = !0, this.txtReward1_2.active = !1) : (IS(c).shareRedPoint = 0, this.redPoint1.active = !1, this.btnShare.getComponent(i).interactable = !1, this.imgGrey1.active = !0, this.imgYellow1.active = !1, this.txtReward1_0.active = !1, this.txtReward1_1.active = !1, this.txtReward1_2.active = !0), 0 == IS(c).fbLikeReward ? (IS(c).likeRedPoint = 0, this.redPoint2.active = !1, this.btnLike.getComponent(i).interactable = !0, this.imgGrey2.active = !1, this.imgYellow2.active = !0, this.txtReward2_0.active = !0, this.txtReward2_1.active = !1, this.txtReward2_2.active = !1) : 1 == IS(c).fbLikeReward ? (IS(c).likeRedPoint = 1, this.redPoint2.active = !0, this.btnLike.getComponent(i).interactable = !0, this.imgGrey2.active = !1, this.imgYellow2.active = !1, this.txtReward2_0.active = !1, this.txtReward2_1.active = !0, this.txtReward2_2.active = !1) : (IS(c).likeRedPoint = 0, this.redPoint2.active = !1, this.btnLike.getComponent(i).interactable = !1, this.imgGrey2.active = !0, this.imgYellow2.active = !1, this.txtReward2_0.active = !1, this.txtReward2_1.active = !1, this.txtReward2_2.active = !0), IS(c).fbRedPoint = IS(c).shareRedPoint + IS(c).likeRedPoint > 0 ? 1 : 0, IS(c).updateRedPoint()
                }
                onShareComplete(t = 0) {
                    1 == t && 2 != IS(c).fbShareReward && IS(w).sendFbShareReward(2)
                }
                onLikeComplete(t = 0) {
                    1 == t && IS(w).sendFbLikeReward(1)
                }
            });
            class S extends d {
                constructor(...t) {
                    super(...t), this.itemGridNode = void 0, this.itemGrid = void 0
                }
                onInit() {
                    this.itemGridNode = r.findChild(this.node, "itemGrid"), this.itemGrid = new a(this.view, this.itemGridNode)
                }
                onRender(t, e) {
                    this.itemGrid.SetItemId(t[0], t[1])
                }
            }
            n._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WelfareVIPView.ts", ["cc", "./ItemGrid.ts", "./UIList.ts", "./NodeUtil.ts", "./index52.ts", "./ConfigGlobal.ts", "./NativeToJs.ts", "./WelfareDataCache.ts", "./BaseSubView.ts"], function(e) {
    "use strict";
    var t, i, n, s, o, d, r, a, c, l, h;
    return {
        setters: [function(e) {
            t = e.Button, i = e.ScrollView, n = e.RichText, s = e.cclegacy
        }, function(e) {
            o = e.ItemGrid
        }, function(e) {
            d = e.ListItem
        }, function(e) {
            r = e.default
        }, null, function(e) {
            a = e.ConfigGlobal
        }, function(e) {
            c = e.NativeToJs
        }, function(e) {
            l = e.WelfareDataCache
        }, function(e) {
            h = e.BaseSubView
        }],
        execute: function() {
            s._RF.push({}, "23644I0N7dKiZagyZs2Cvju", "WelfareVIPView", void 0);
            e("default", class extends h {
                constructor() {
                    super(), this.rewardList = void 0, this.redPoint = void 0, this.txtDesc = void 0, this.name = "WelfareVIPView", this.url = "ui/module/welfare/WelfareVIPView"
                }
                onInit() {
                    const e = this.findChild("btnClose");
                    this.addComponentCallbackListener(e, t.EventType.CLICK, (() => {
                        uiMgr.getOpenView("MenuView").close(), uiMgr.getOpenView("WelfareCenterView").close()
                    })), this.rewardList = this.addUIList(this.findChildComponent("content/nodeReward/RewardScroll", i), u), this.rewardList.lackCenter = !0;
                    const s = this.findChild("btnVerify");
                    this.addComponentCallbackListener(s, t.EventType.CLICK, (() => {
                        IS(l).VIPRedPoint = 0, c.openURL("https://www.facebook.com/61554264712997")
                    })), this.redPoint = this.findChild("btnVerify/RedPoint"), this.txtDesc = this.findChildComponent("content/nodeVIPPower/txtDesc", n), this.txtDesc.string = GetLanguage(999100086)
                }
                registerUpdateHandler() {}
                onAfterOpen() {
                    this.rewardList.datas = a.vip_identify_reward, this.updateRedPoint()
                }
                onBeforeClose() {}
                onDestroy() {}
                updateRedPoint() {
                    IS(l).VIPRedPoint > 0 ? this.redPoint.active = !0 : this.redPoint.active = !1
                }
            });
            class u extends d {
                constructor(...e) {
                    super(...e), this.itemGridNode = void 0, this.itemGrid = void 0
                }
                onInit() {
                    this.itemGridNode = r.findChild(this.node, "itemGrid"), this.itemGrid = new o(this.view, this.itemGridNode)
                }
                onRender(e, t) {
                    this.itemGrid.SetItemId(e[0], e[1])
                }
            }
            s._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingAsset.ts", ["cc", "./V2.ts", "./AssetPool.ts", "./BaseAsset.ts", "./SpineSkeleton.ts"], function(t) {
    "use strict";
    var s, e, i, n, o, c, a, h, r;
    return {
        setters: [function(t) {
            s = t.cclegacy, e = t.Layers, i = t.isValid, n = t.sp
        }, function(t) {
            o = t.V2
        }, function(t) {
            c = t.AssetPoolState
        }, function(t) {
            a = t.BaseAsset
        }, function(t) {
            h = t.SpineSkeleton, r = t.AnimationType
        }],
        execute: function() {
            var _;
            s._RF.push({}, "4f2b3AUeKFPDrRUGBYSpVef", "WingAsset", void 0),
                function(t) {
                    t[t.Not = 0] = "Not", t[t.Ani = 128] = "Ani"
                }(_ || (_ = {}));
            t("WingAsset", class extends a {
                constructor() {
                    super(), this.id = 0, this._bind = void 0, this._spine = void 0, this._animator = void 0, this._ani = "idel", this._bindPos = 1, this._socket = void 0, this.isUI = !0
                }
                static alloc(t, s, i, n, c = 1) {
                    const a = wingPool.alloc(s, 3);
                    return a._bind = i, a.parent = n, a.layer = e.Enum.DEFAULT, a._spine = t, a.loadSync(), a.scale = 1, a.position = o.ZERO, a.aniName = `idel${c}`, a._bindPos = c, a
                }
                static free(t) {
                    t.free()
                }
                onLoadComplete() {
                    const t = this._node.getComponent(h);
                    t.animationType = r.UI, t.__preload(), this._animator = t
                }
                onAfterCacheFree() {
                    super.onAfterCacheFree();
                    const t = this._spine;
                    if (this._spine = null, !i(t)) return;
                    if (!this._socket) return;
                    const s = t.sockets.indexOf(this._socket);
                    t.sockets.splice(s, 1), this._socket = null, t.sockets = t.sockets
                }
                onUpdate(t) {
                    if (super.onUpdate(t), this.poolState > c.Useing) return;
                    const s = this._spine;
                    i(this.node) && i(s) && s._skeleton && (this._socket || (this._socket = new n.SpineSocket(this._bind, this.node), s.sockets.push(this._socket), s.sockets = s.sockets))
                }
                onApply(t) {
                    this._changeValue & _.Ani && this._animator.setAnimation(0, this._ani, !0)
                }
                set aniName(t) {
                    this._ani != t && (this._ani = t, this._changeValue = this._changeValue | _.Ani)
                }
            }), s._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingBookView.ts", ["cc", "./UIList.ts", "./UIRichText.ts", "./NodeUtil.ts", "./StringUtil.ts", "./index52.ts", "./WingControl.ts", "./WingDataCache.ts", "./WingDefine.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var i, e, n, o, s, d, a, c, h, l, r, g, C, m;
    return {
        setters: [function(t) {
            i = t.Button, e = t.ScrollView, n = t.cclegacy, o = t.Label, s = t.js, d = t.Sprite
        }, function(t) {
            a = t.ListItem
        }, function(t) {
            c = t.UIRichText
        }, function(t) {
            h = t.default
        }, function(t) {
            l = t.default
        }, null, function(t) {
            r = t.default
        }, function(t) {
            g = t.WingDataCache
        }, function(t) {
            C = t.WingEvent
        }, function(t) {
            m = t.BaseView
        }],
        execute: function() {
            n._RF.push({}, "f52850x+jBNELnAIwPzFP6U", "WingBookView", void 0);
            t("default", class extends m {
                constructor() {
                    super(), this.scrollView = void 0, this.name = "WingBookView", this.url = "ui/module/wing/WingBookView", this.poolTime = 3e3
                }
                onInit() {
                    this.addComponentCallbackListener(this.findChild("imgMask"), i.EventType.CLICK, (() => {
                        this.close()
                    })), this.addComponentCallbackListener(this.findChild("container/btnClose"), i.EventType.CLICK, (() => {
                        this.close()
                    })), this.scrollView = this.addUIList(this.findChildComponent("container/taskList", e), f)
                }
                onAfterOpen() {
                    this.UpdateList()
                }
                registerUpdateHandler() {
                    this.addEvent(C.TYPE_WING_CHANGE, this.UpdateList, this)
                }
                UpdateList() {
                    let t = [],
                        i = configBack_book.getDatas();
                    for (let e = 0; e < i.length; e++) t.push(i[e]);
                    t.sort(((t, i) => {
                        let e = 0,
                            n = 0;
                        return IS(g).GetCollectionRedById(t.id) && (e += 1e6), IS(g).GetCollectionRedById(t.id) && (n += 1e6), IS(g).GetCollectionIsActive(t.id) || (e += 1e4), IS(g).GetCollectionIsActive(t.id) || (n += 1e4), t.id < i.id ? e += 100 : t.id > i.id && (n += 100), e < n ? 1 : -1
                    })), this.scrollView.datas = t
                }
                onBeforeClose() {}
                onDestroy() {}
            });
            class f extends a {
                constructor(...t) {
                    super(...t), this.itemList = void 0, this.txtDesc = void 0, this.getBtn = void 0, this.received = void 0, this.undone = void 0
                }
                onInit() {
                    this.itemList = this.view.addUIList(h.findChildComponent(this.node, "ScrollView", e), u), this.txtDesc = h.findChildComponent(this.node, "txtDesc", c), this.getBtn = h.findChild(this.node, "btnGet"), this.view.addComponentCallbackListener(this.getBtn, i.EventType.CLICK, (() => {
                        IS(r).send_wing_collection_active_c2s(this.data.id)
                    })), this.received = h.findChild(this.node, "received"), this.undone = h.findChildComponent(this.node, "undone", o)
                }
                onRender(t, i) {
                    this.data = t;
                    let e = l.formatStr(GetLanguage(201820), s.formatStr("<color=#00a100>+%s</color>", t.level));
                    this.txtDesc.string = s.formatStr("<b><color=#624324>%s</color></b>", e);
                    let n = IS(g).GetCollectionRedById(t.id),
                        o = IS(g).GetCollectionIsActive(t.id);
                    if (this.itemList.datas = this.data.condition, this.received.active = o, this.getBtn.active = n, n || o) this.undone.string = "";
                    else {
                        let t = 0;
                        for (let i = 0; i < this.data.condition.length; i++) {
                            let e = this.data.condition[i];
                            IS(g).getWingState(e) > 1 && t++
                        }
                        this.undone.string = s.formatStr("(%s/%s)", t, this.data.condition.length)
                    }
                }
            }
            class u extends a {
                constructor(...t) {
                    super(...t), this.imgFrame = void 0, this.imgIcon = void 0, this.imgMask = void 0
                }
                onInit() {
                    this.imgFrame = h.findChildComponent(this.node, "itemGrid/imgFrame", d), this.imgIcon = h.findChildComponent(this.node, "itemGrid/imgIcon", d), this.imgMask = h.findChild(this.node, "itemGrid/mask");
                    const t = h.findChild(this.node, "itemGrid");
                    this.view.addComponentCallbackListener(t, i.EventType.CLICK, (() => {}))
                }
                onRender(t, i) {
                    this.data = t;
                    var e = configBack_decoration.getDataByKey(this.data).icon_small,
                        n = configBack_decoration.getDataByKey(this.data).quality,
                        o = configColor.getDataByKey(n).path;
                    this.view.loadIcon(this.imgFrame, "icon_equip", o), this.view.loadIcon(this.imgIcon, "icon_item", e), this.imgMask.active = IS(g).getWingState(this.data) <= 1
                }
            }
            n._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingControl.ts", ["cc", "./BattleData.ts", "./UnitMgr.ts", "./index52.ts", "./BagDefine.ts", "./ChapterDataCache.ts", "./ChapterDefine.ts", "./ControlMgr.ts", "./RoleDefine.ts", "./WingDataCache.ts", "./UIDefine.ts"], function(e) {
    "use strict";
    var n, t, i, _, s, a, c, o, g, l, r;
    return {
        setters: [function(e) {
            n = e.cclegacy
        }, function(e) {
            t = e.ChapterType
        }, function(e) {
            i = e.UnitMgr
        }, null, function(e) {
            _ = e.BagEventDefine, s = e.GoodsType
        }, function(e) {
            a = e.ChapterDataCache
        }, function(e) {
            c = e.ChapterEventDefine
        }, function(e) {
            o = e.controlMgr
        }, function(e) {
            g = e.RoleEventDefine
        }, function(e) {
            l = e.WingDataCache
        }, function(e) {
            r = e.OpenFunction
        }],
        execute: function() {
            n._RF.push({}, "08517ToRThNK4akEZ5n8Es3", "WingControl", void 0);
            e("default", class {
                clear() {
                    printLog("WingControl")
                }
                constructor() {
                    netManager.addEventListener("wing.wing_info_s2c", this.on_wing_info_s2c, this), netManager.addEventListener("wing.wing_feather_level_up_s2c", this.on_wing_feather_level_up_s2c, this), netManager.addEventListener("wing.wing_use_s2c", this.on_wing_use_s2c, this), netManager.addEventListener("wing.wing_talent_lev_up_s2c", this.on_wing_talent_lev_up_s2c, this), netManager.addEventListener("wing.wing_talent_reset_s2c", this.on_wing_talent_reset_s2c, this), netManager.addEventListener("wing.wing_skill_use_s2c", this.on_wing_skill_use_s2c, this), netManager.addEventListener("wing.wing_collection_active_s2c", this.on_wing_collection_active_s2c, this), netManager.addEventListener("wing.wing_skin_level_up_s2c", this.on_wing_skin_level_up_s2c, this), normalEvent.on(_.GOODS_INFO_UPDATE, this.updateItemCheck, this), normalEvent.on(g.ROLE_OPEN_FUNCTION_UPDATE, this.updateFunOpenCheck, this), normalEvent.on(g.ROLE_OPEN_FUNCTION_UPDATE, this.sendProto, this), normalEvent.on(g.ROLE_INFO_INIT, this.sendProto, this), normalEvent.on(g.ROLE_INFO_INIT, this.updateFunOpenCheck, this), o.addControl(this)
                }
                onLogin() {
                    this.sendProto()
                }
                sendProto() {
                    IS(l).isSendProto || (this.send_wing_info_c2s(), IS(l).isSendProto = !0)
                }
                onReconnect() {
                    IS(l).isSendProto = !1, this.sendProto()
                }
                updateItemCheck(e, n) {
                    if (n && 1084 != n && 1085 != n) {
                        if (configGoods.getDataByKey(n).type != s.Wing) return
                    }
                    IS(l).UpdateTalentRed(), IS(l).UpdateFeatureRed(), IS(l).checkSkinRP()
                }
                updateFunOpenCheck(e) {
                    e && e != r.FUNC_BACK || (IS(l).UpdateTalentRed(), IS(l).UpdateFeatureRed(), IS(l).checkSkinRP())
                }
                send_wing_info_c2s() {
                    netManager.send("wing.wing_info_c2s", {})
                }
                on_wing_info_s2c(e) {
                    IS(l).SetWingData(e)
                }
                send_wing_feather_level_up_c2s(e, n) {
                    netManager.send("wing.wing_feather_level_up_c2s", {
                        cfg_id: e,
                        type: n
                    })
                }
                on_wing_feather_level_up_s2c(e) {
                    IS(l).UpdateFeatureData(e)
                }
                send_wing_use_c2s(e) {
                    netManager.send("wing.wing_use_c2s", {
                        cfg_id: e
                    })
                }
                on_wing_use_s2c(e) {
                    IS(l).UpdateWingId(e)
                }
                send_wing_talent_lev_up_c2s(e, n) {
                    netManager.send("wing.wing_talent_lev_up_c2s", {
                        type: e,
                        cfg_id: n
                    })
                }
                on_wing_talent_lev_up_s2c(e) {
                    IS(l).UpdateTalentList(e)
                }
                send_wing_talent_reset_c2s(e) {
                    netManager.send("wing.wing_talent_reset_c2s", {
                        type: e
                    })
                }
                on_wing_talent_reset_s2c(e) {
                    IS(l).ResetTalentList(e)
                }
                send_wing_skill_use_c2s(e) {
                    netManager.send("wing.wing_skill_use_c2s", {
                        cfg_id: e
                    })
                }
                on_wing_skill_use_s2c(e) {
                    IS(l).ChangeUseSkill(e)
                }
                send_wing_skin_level_up_c2s(e) {
                    netManager.send("wing.wing_skin_level_up_c2s", {
                        cfg_id: e
                    })
                }
                on_wing_skin_level_up_s2c(e) {
                    IS(l).UpdateSkinLevel(e)
                }
                send_wing_collection_active_c2s(e) {
                    netManager.send("wing.wing_collection_active_c2s", {
                        cfg_id: e
                    })
                }
                on_wing_collection_active_s2c(e) {
                    IS(l).UpdateCollection(e)
                }
                previewBattle(e) {
                    IS(l).prviewId = e;
                    const n = IS(a);
                    n.currentLoadType = 0, n.chapterType = t.WingPreview, n.battleData = n.createBattleData(t.WingPreview, 50001, 0, !0);
                    const _ = n.battleData.playerList[1].units[0];
                    _.skin.wing = e;
                    const s = configBack_skin.getDataByKeys("back_id", e, "skin_level", 1),
                        o = configSkill.getDataByKey(s.skin_skill[0][0]);
                    i.addSkill(_, o.id, 1), n.curDungeonId = 50001, battleMain.enterChapter(configArtifact_preview_chapter.getDataByKey(50001).bossModel), uiMgr.HideAllView(["MainView", "BattleHubView"]), normalEvent.emit(c.BATTLE_STATE, t.WingPreview, !0)
                }
            }), n._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingDataCache.ts", ["cc", "./RedPointMgr.ts", "./TimeUtil.ts", "./index52.ts", "./ConfigGlobal.ts", "./ObjectUtil.ts", "./BagModel.ts", "./RoleDataCache.ts", "./WingDefine.ts", "./UIDefine.ts"], function(t) {
    "use strict";
    var e, i, n, l, s, a, o, h, r;
    return {
        setters: [function(t) {
            e = t.cclegacy
        }, function(t) {
            i = t.RedPointMgr
        }, function(t) {
            n = t.default
        }, null, function(t) {
            l = t.ConfigGlobal
        }, function(t) {
            s = t.default
        }, function(t) {
            a = t.BagModel
        }, function(t) {
            o = t.RoleDataCache
        }, function(t) {
            h = t.WingEvent
        }, function(t) {
            r = t.OpenFunction
        }],
        execute: function() {
            e._RF.push({}, "bb2b09d/YlAq6U5+Z7JZaCU", "WingDataCache", void 0);
            class c {
                constructor() {
                    this.isSendProto = void 0, this.wing_id = void 0, this.prviewId = void 0, this.feather_list = {}, this.talent_list = {}, this.skin_list = void 0, this.skill_use = void 0, this.collection_list = {}, this.wingRed = {}, this.talentTypeRed = {}, this.talentRed = {}, this.skinRed = 0, this.collectionRed = {}, this.bookAddlev = 0, this.cacheMaxTalent = {}, this.cacheFirstTalent = {}
                }
                clear() {}
                SetWingData(t) {
                    this.wing_id = t.use, this.feather_list = {};
                    for (let e = 0; e < t.feather_list.length; e++) {
                        let i = t.feather_list[e];
                        this.feather_list[i.cfg_id] = i
                    }
                    this.talent_list = {};
                    for (let e = 0; e < t.talent_type_list.length; e++) {
                        let i = t.talent_type_list[e].talent_list;
                        for (let t = 0; t < i.length; t++) this.talent_list[i[t].k] = i[t].v
                    }
                    this.skin_list = {};
                    for (let e = 0; e < t.skin_list.length; e++) this.skin_list[t.skin_list[e].k] = t.skin_list[e].v;
                    this.collection_list = {};
                    for (let e = 0; e < t.collection_list.length; e++) this.collection_list[t.collection_list[e]] = !0;
                    this.skill_use = t.skill_use, this.UpdateFeatureRed(), this.checkSkinRP(), this.UpdateTalentRed(), this.UpdateCollectionRed(), normalEvent.emit(h.TYPE_WING_CHANGE)
                }
                UpdateFeatureData(t) {
                    this.feather_list[t.feather.cfg_id] = t.feather, this.UpdateFeatureRed(), this.UpdateCollectionRed(), normalEvent.emit(h.TYPE_WING_CHANGE)
                }
                UpdateWingId(t) {
                    this.wing_id = t.use, normalEvent.emit(h.TYPE_WING_CHANGE)
                }
                UpdateTalentList(t) {
                    this.talent_list[t.talent.k] = t.talent.v, this.UpdateTalentRed(), normalEvent.emit(h.TYPE_WING_TALENT_CHANGE)
                }
                ResetTalentList(t) {
                    let e = s.copyObject(this.talent_list);
                    for (const i in e) {
                        configBack_talent.getDataByKey(i).job_type == t.type && delete this.talent_list[i]
                    }
                    this.UpdateTalentRed(), normalEvent.emit(h.TYPE_WING_TALENT_CHANGE)
                }
                GetFeatureInfo(t) {
                    return this.feather_list[t] ?? {
                        cfg_id: t,
                        level: 0,
                        exp: 0
                    }
                }
                GetTalentInfo(t) {
                    return this.talent_list[t] ?? 0
                }
                GetWingIsOpen(t) {
                    let e = l.back_decoration_unlock;
                    for (let i = 0; i < e.length; i++)
                        if (e[i][0] == t)
                            for (let t = 0; t < e.length; t++) {
                                let n = e[i][1][t][0],
                                    l = e[i][1][t][1];
                                if (!this.feather_list[n] || this.feather_list[n].level + this.GetBookAddLev() < l) return [!1, l]
                            }
                    return [!0, 0]
                }
                getSkinLevelByID(t) {
                    return this.skin_list ? this.skin_list[t] ?? 0 : 0
                }
                checkWingCanShow(t) {
                    const e = configBack_decoration.getDataByKey(t);
                    if (null == e) return !1;
                    const i = e.open_time;
                    return !!s.isEmpty(i) || n.checkOpenTime(i)
                }
                getAllWingState(t) {
                    let e = this.getWingState(t);
                    return 5 == e && this.getSkinLevelByID(t) > 0 ? 2 : e
                }
                getWingState(t) {
                    if (this.wing_id == t) return 4;
                    if (!configBack_skin.getDataByKey(t)) {
                        let [e] = this.GetWingIsOpen(t);
                        return e ? 2 : 1
                    }
                    var e = configBack_skin.getDataByKeys("back_id", t, "skin_level", this.getSkinLevelByID(t));
                    return null == e.expend || 0 == e.expend.length ? t == this.wing_id ? 4 : 3 : IS(a).getGoodsCountByGoodsGtid(e.expend[0][0]) >= e.expend[0][1] ? 5 : t == this.wing_id ? 4 : 0 == e.attr.length ? 1 : 2
                }
                UpdateFeatureRed() {
                    if (!IS(o).CheckFuncOpen(r.FUNC_BACK)) return;
                    let t = {};
                    var e = IS(a).getGoodsCountByGoodsGtid(1084);
                    let n = configBack_level.getDataListByMainKey("id");
                    if (e > 0)
                        for (const i in n) {
                            let n = Number(i),
                                a = this.GetFeatureInfo(n);
                            var l = configBack_level.getDataByKeys("id", n, "level", a.level + 1);
                            if (null != l && 1 != l.era_level) {
                                var s = l.expend_exp;
                                e >= (s -= a.exp) && (t[n] = 1)
                            }
                        }
                    this.wingRed = t, IS(i).changeValue("wing_red", this.GetWingRed()), normalEvent.emit(h.TYPE_WING_FEATURE_RED_CHANGE)
                }
                GetWingRedById(t) {
                    return this.wingRed[t] ?? 0
                }
                UpdateTalentRed() {
                    if (!IS(o).CheckFuncOpen(r.FUNC_BACK)) return;
                    let t = {},
                        e = {},
                        n = {},
                        l = !0;
                    for (let t = 1; t <= 3; t++) {
                        let e = this.GetCurTypeAllFirstTalent(t);
                        for (let i = 0; i < e.length; i++) {
                            if (this.GetTalentInfo(e[i]) > 0) {
                                l = !1, n[t] = !0;
                                break
                            }
                        }
                    }
                    let s = configBack_talent.getDataListByMainKey("id"),
                        c = IS(a).getGoodsCountByGoodsGtid(1085);
                    for (const i in s) {
                        let a = Number(i),
                            o = this.GetTalentInfo(a);
                        if (s[i].length != o) {
                            let h = s[i][o];
                            if (h && (n[h.job_type] || l)) {
                                let i = !0;
                                0 == o && (i = this.GetTalentIsActive(a));
                                for (let n = 0; n < h.cost.length; n++) i && c >= h.cost[n][1] && (t[h.job_type] || (t[h.job_type] = !0), e[h.id] = !0)
                            }
                        }
                    }
                    this.talentTypeRed = t, this.talentRed = e, IS(i).changeValue("wing_red", this.GetWingRed()), normalEvent.emit(h.TYPE_WING_TALENT_RED_CHANGE)
                }
                GetTalentIsActive(t) {
                    if (this.GetTalentInfo(t) > 0) return !0;
                    let e = configBack_talent.getDataListByMainKey("id"),
                        i = e[t][0];
                    if (0 == i.condition_1.length) {
                        let t = this.GetCurTypeAllFirstTalent(i.job_type);
                        for (let i = 0; i < t.length; i++) {
                            if (this.GetTalentInfo(t[i]) > 0) {
                                let n = e[t[i]][0],
                                    l = this.GetCurTypeMaxTalent(n.job_type, n.color_type);
                                if (0 == this.GetTalentInfo(l)) return !1
                            }
                        }
                        return !0
                    }
                    for (let e = 1; e <= 2; e++)
                        if (i["condition_" + e].length > 0) {
                            let n = !0;
                            for (let t = 0; t < i["condition_" + e].length; t++) {
                                let l = i["condition_" + e][t][0],
                                    s = i["condition_" + e][t][1];
                                if (IS(c).GetTalentInfo(l) < s) {
                                    n = !1;
                                    break
                                }
                            }
                            if (n) return this.GetTalentlevIsFull(t)
                        } return !1
                }
                GetTalentlevIsFull(t) {
                    let e = configBack_talent.getDataListByMainKey("id")[t][0];
                    if (this.GetCurTypeMaxTalent(e.job_type, e.color_type) == t) {
                        let t = 0;
                        for (let e = 1; e <= 3; e++)
                            for (let i = 1; i <= 3; i++) {
                                let n = this.GetCurTypeMaxTalent(e, i);
                                if (this.GetTalentInfo(n) > 0 && (t++, t >= 3)) return !1
                            }
                    }
                    return !0
                }
                GetCurTypeMaxTalent(t, e) {
                    if (this.cacheMaxTalent[t] && this.cacheMaxTalent[t][e]) return this.cacheMaxTalent[t][e];
                    let i = configBack_talent.getDatas();
                    if (i && i.length > 0) {
                        let n = 0;
                        for (let l = 0; l < i.length; l++) {
                            let s = i[l].id;
                            t == i[l].job_type && e == i[l].color_type && s > n && (n = s)
                        }
                        return this.cacheMaxTalent[t] || (this.cacheMaxTalent[t] = {}), this.cacheMaxTalent[t][e] = n, n
                    }
                    return 0
                }
                GetCurTypeAllFirstTalent(t) {
                    if (this.cacheFirstTalent[t]) return this.cacheFirstTalent[t];
                    this.cacheFirstTalent[t] || (this.cacheFirstTalent[t] = []);
                    let e = configBack_talent.getDatas();
                    if (e && e.length > 0)
                        for (let i = 0; i < e.length; i++) e[i].job_type == t && 1 == e[i].level && 0 == e[i].condition_1.length && this.cacheFirstTalent[t].push(e[i].id);
                    return this.cacheFirstTalent[t]
                }
                GetTalenTypeRed(t) {
                    return this.talentTypeRed[t] ?? 0
                }
                GetTalenRedById(t) {
                    return this.talentRed[t] ?? 0
                }
                GetWingUpgradRed() {
                    for (const t in this.wingRed) return 1;
                    return 0
                }
                GetWingTalentRed() {
                    for (const t in this.talentTypeRed) return 1;
                    return 0
                }
                GetWingRed() {
                    return this.GetWingTalentRed() + this.GetWingUpgradRed() + this.skinRed + this.GetCollectionRed()
                }
                ChangeUseSkill(t) {
                    this.skill_use = t.skill_use, normalEvent.emit(h.TYPE_WING_USE_SKILL)
                }
                UpdateSkinLevel(t) {
                    this.skin_list || (this.skin_list = {}), this.skin_list[t.skin.k] = t.skin.v, this.checkSkinRP(), normalEvent.emit(h.TYPE_WING_CHANGE)
                }
                UpdateCollection(t) {
                    this.collection_list[t.cfg_id] = !0, this.UpdateCollectionRed(), normalEvent.emit(h.TYPE_WING_CHANGE)
                }
                checkSkinRP() {
                    this.skinRed = 0;
                    const t = configBack_skin.getDataByList("skin_level", 0);
                    for (const e of t)
                        if (this.checkWingCanShow(e.back_id) && this.GetWingCanUp(e.back_id)) {
                            this.skinRed = 1;
                            break
                        } IS(i).changeValue("wing_red", this.GetWingRed()), normalEvent.emit(h.TYPE_WING_SKIN_RED_CHANGE)
                }
                GetWingCanUp(t) {
                    var e = configBack_skin.getDataByKeys("back_id", t, "skin_level", this.getSkinLevelByID(t));
                    return null != e.expend && e.expend.length > 0 && IS(a).getGoodsCountByGoodsGtid(e.expend[0][0]) >= e.expend[0][1]
                }
                GetSkinRed() {
                    return this.skinRed
                }
                GetCollectionIsActive(t) {
                    return this.collection_list[t]
                }
                GetCollectionRedById(t) {
                    return this.collectionRed[t]
                }
                GetCollectionRed() {
                    for (const t in this.collectionRed) return 1;
                    return 0
                }
                UpdateCollectionRed() {
                    this.collectionRed = {};
                    let t = this.bookAddlev;
                    if (this.bookAddlev = 0, this.skin_list) {
                        let t = configBack_book.getDatas();
                        for (let e = 0; e < t.length; e++) {
                            let i = t[e];
                            if (this.collection_list[i.id]) {
                                this.bookAddlev += i.level;
                                continue
                            }
                            let n = !0;
                            for (let t = 0; t < i.condition.length; t++) {
                                let e = i.condition[t];
                                this.getWingState(e) <= 1 && (n = !1)
                            }
                            n && (this.collectionRed[i.id] = !0)
                        }
                    }
                    t != this.bookAddlev && normalEvent.emit(h.TYPE_WING_CHANGE), normalEvent.emit(h.TYPE_WING_BOOK_RED_CHANGE)
                }
                GetBookAddLev() {
                    return this.bookAddlev
                }
            }
            t("WingDataCache", c), e._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingDefine.ts", ["cc"], function(_) {
    "use strict";
    var E;
    return {
        setters: [function(_) {
            E = _.cclegacy
        }],
        execute: function() {
            E._RF.push({}, "7464dseq21Ikq3zt7nSD7ZB", "WingDefine", void 0);
            _("WingEvent", {
                TYPE_WING_CHANGE: "TYPE_WING_CHANGE",
                TYPE_WING_COLLECTION_CHANGE: "TYPE_WING_COLLECTION_CHANGE",
                TYPE_WING_TALENT_CHANGE: "TYPE_WING_TALENT_CHANGE",
                TYPE_WING_SKIN_EFFECT_SEL: "TYPE_ARTIFACT_SKIN_SKILL_SEL",
                TYPE_WING_ADD_EXP: "TYPE_ARTIFACT_ADD_EXP",
                TYPE_WING_FEATURE_RED_CHANGE: "TYPE_WING_FEATURE_RED_CHANGE",
                TYPE_WING_TALENT_RED_CHANGE: "TYPE_WING_TALENT_RED_CHANGE",
                TYPE_WING_SKIN_RED_CHANGE: "TYPE_WING_SKIN_RED_CHANGE",
                TYPE_WING_BOOK_RED_CHANGE: "TYPE_WING_BOOK_RED_CHANGE",
                TYPE_WING_USE_SKILL: "TYPE_WING_USE_SKILL"
            }), _("WingColorIcon", {
                1: "bs_ui_tiangfudi1",
                2: "bs_ui_tiangfudi2",
                3: "bs_ui_tiangfudi3"
            });
            E._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingDungeonAttrView.ts", ["cc", "./UIList.ts", "./NodeUtil.ts", "./index52.ts", "./ConfigGlobal.ts", "./RoleDataCache.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var e, i, n, s, o, a, l, r, c;
    return {
        setters: [function(t) {
            e = t.Button, i = t.ScrollView, n = t.cclegacy, s = t.Label
        }, function(t) {
            o = t.ListItem
        }, function(t) {
            a = t.default
        }, null, function(t) {
            l = t.ConfigGlobal
        }, function(t) {
            r = t.RoleDataCache
        }, function(t) {
            c = t.BaseView
        }],
        execute: function() {
            n._RF.push({}, "44a1asLuSZEu5obAjbC9KyX", "WingDungeonAttrView", void 0);
            t("default", class extends c {
                constructor() {
                    super(), this.attrList = void 0, this.name = "WingDungeonAttrView", this.url = "ui/module/wing/WingDungeonAttrView"
                }
                onInit() {
                    const t = this.findChild("imgMask");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const n = this.findChildComponent("view/attrList", i);
                    this.attrList = this.addUIList(n, h)
                }
                registerUpdateHandler() {}
                onAfterOpen() {
                    const t = this.openArgs[0],
                        e = configDark_trial_chapter.getDatas().find((e => e.part_type == t.type && e.level == t.cur_level)),
                        i = configUnit.getDataByKey(e.monster_refresh1[0][0]),
                        n = [];
                    for (const t of l.base_attr) {
                        const e = i[configAttribute.getDataByKey(t).key] ?? 0;
                        n.push({
                            id: t,
                            value: e
                        })
                    }
                    const s = [];
                    for (const t of l.advanced_attr) {
                        const e = i[configAttribute.getDataByKey(t).key] ?? 0;
                        s.push({
                            id: t,
                            value: e
                        })
                    }
                    const o = [GetLanguage(200103), n],
                        a = [GetLanguage(200104), s];
                    let r = [];
                    r.push(o), r.push(a), this.attrList.datas = r
                }
                onBeforeClose() {}
                onDestroy() {}
            });
            class h extends o {
                constructor(...t) {
                    super(...t), this.txtTitle = void 0, this.scroll = void 0
                }
                onInit() {
                    this.adaptiveSize = !0, this.txtTitle = a.findChildComponent(this.node, "title/Label", s);
                    const t = a.findChildComponent(this.node, "scroll", i);
                    this.scroll = this.view.addUIList(t, u, !1), this.scroll.touchEvent = !1
                }
                onRender(t, e) {
                    this.txtTitle.string = t[0];
                    const i = 40 * t[1].length + 15 + 15 + .01;
                    this.scroll.height = i, this.scroll.datas = t[1], this.ut.height = 42 + i
                }
            }
            class u extends o {
                constructor(...t) {
                    super(...t), this.txtName = void 0, this.txtValue = void 0
                }
                onInit() {
                    this.txtName = a.findChildComponent(this.node, "txtAttrName", s), this.txtValue = a.findChildComponent(this.node, "txtAttrValue", s)
                }
                onRender(t, e) {
                    const i = configAttribute.getDataByKey(t.id);
                    this.txtName.string = i.name, this.txtValue.string = IS(r).getAttrValueShow(t.id, t.value, !0)
                }
            }
            n._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingDungeonBossView.ts", ["cc", "./V2.ts", "./UIList.ts", "./NodeUtil.ts", "./StringUtil.ts", "./index52.ts", "./ConfigGlobal.ts", "./RoleDataCache.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var e, i, s, n, o, l, a, d, r, c, h, f, u;
    return {
        setters: [function(t) {
            e = t.Button, i = t.ScrollView, s = t.js, n = t.Sprite, o = t.Label, l = t.cclegacy
        }, function(t) {
            a = t.V2
        }, function(t) {
            d = t.ListItem
        }, function(t) {
            r = t.default
        }, function(t) {
            c = t.default
        }, null, function(t) {
            h = t.ConfigGlobal
        }, function(t) {
            f = t.RoleDataCache
        }, function(t) {
            u = t.BaseView
        }],
        execute: function() {
            l._RF.push({}, "cb057nous9JMJzHO61JkR5t", "WingDungeonBossView", void 0);
            t("default", class extends u {
                constructor() {
                    super(), this.stars = [], this.skills = [], this.attrList = void 0, this.nodeModel = void 0, this.model = void 0, this.name = "WingDungeonBossView", this.url = "ui/module/wing/WingDungeonBossView"
                }
                onInit() {
                    const t = this.findChild("btnClose");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const l = this.findChild("view/btn");
                    this.addComponentCallbackListener(l, e.EventType.CLICK, (() => {
                        uiMgr.openView("WingDungeonAttrView", this.openArgs[0])
                    })), this.nodeModel = this.findChild("view/model");
                    for (let t = 1; t <= 5; t++) this.stars[t] = this.findChild("view/stars/star" + t + "/light");
                    const a = this.findChildComponent("view/scroll", i);
                    this.attrList = this.addUIList(a, g);
                    for (let t = 0; t < 6; t++) {
                        let i = r.findChild(this.node, s.formatStr("view/skill/item%s", t + 1)),
                            l = {
                                node: i,
                                frame: r.findChildComponent(i, "frame", n),
                                icon: r.findChildComponent(i, "frame/icon", n),
                                txtLev: r.findChildComponent(i, "lev", o),
                                mask: r.findChild(i, "mask"),
                                skillId: 0,
                                skillLev: 0
                            };
                        this.addComponentCallbackListener(i, e.EventType.CLICK, (() => {
                            if (0 != l.skillId) {
                                const t = configSkill_level.getDataByKeys("id", l.skillId, "level", l.skillLev);
                                uiMgr.openView("JobSkillTipsView", c.formatStr(t.desc, ...t.desc_parm), l.node)
                            }
                        })), this.skills.push(l)
                    }
                }
                registerUpdateHandler() {}
                onAfterOpen() {
                    const t = this.openArgs[0],
                        e = configDark_trial_chapter.getDatas().find((e => e.part_type == t.type && e.level == t.cur_level)),
                        i = configUnitModel.getDataByKey(e.bossModel);
                    this.model && this.removeUIEffect(this.model), this.model = this.addUIEffect(i.path, this.nodeModel, -1, new a(0, 0), i.scale / 100 * 1.5);
                    for (let t = 1; t < this.stars.length; t++) {
                        this.stars[t].active = e.star >= t
                    }
                    const n = configUnit.getDataByKey(e.monster_refresh1[0][0]),
                        o = [];
                    for (const t of h.back_trial_enemy_attribute_show) {
                        const e = n[configAttribute.getDataByKey(t).key] ?? 0;
                        o.push({
                            id: t,
                            value: e
                        })
                    }
                    this.attrList.datas = o;
                    for (let t = 0; t < this.skills.length; t++) {
                        const e = this.skills[t],
                            i = n.skills[t];
                        if (i) {
                            e.skillId = i, e.skillLev = 1, e.icon.node.active = !0;
                            const t = configSkill.getDataByKey(e.skillId);
                            this.loadIcon(e.frame, "icon_skill", s.formatStr("common_ICON_jinengkuang0%s", t.quality)), this.loadIcon(e.icon, "icon_skill", t.icon), e.txtLev.node.active = !0, e.txtLev.string = s.formatStr("Lv.%s", 1)
                        } else e.skillId = 0, e.skillLev = 0, this.loadIcon(e.frame, "icon_skill", "common_ICON_jinengwenhao"), e.icon.node.active = !1, e.txtLev.node.active = !1
                    }
                }
                onBeforeClose() {}
                onDestroy() {}
            });
            class g extends d {
                constructor(...t) {
                    super(...t), this.txtName = void 0, this.txtValue = void 0
                }
                onInit() {
                    this.txtName = r.findChildComponent(this.node, "txtAttrName", o), this.txtValue = r.findChildComponent(this.node, "txtAttrValue", o)
                }
                onRender(t, e) {
                    const i = configAttribute.getDataByKey(t.id);
                    this.txtName.string = i.name, this.txtValue.string = IS(f).getAttrValueShow(t.id, t.value, !0)
                }
            }
            l._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingDungeonFastView.ts", ["cc", "./V2.ts", "./ItemGrid.ts", "./UIList.ts", "./NodeUtil.ts", "./index52.ts", "./DungeonControl.ts", "./MessageView.ts", "./PrivilegeDataCache.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var e, i, s, n, o, r, d, a, l, h, c, u, f, g;
    return {
        setters: [function(t) {
            e = t.Button, i = t.Label, s = t.HorizontalTextAlignment, n = t.ScrollView, o = t.js, r = t.cclegacy
        }, function(t) {
            d = t.V2
        }, function(t) {
            a = t.ItemGrid
        }, function(t) {
            l = t.ListItem
        }, function(t) {
            h = t.default
        }, null, function(t) {
            c = t.default
        }, function(t) {
            u = t.default
        }, function(t) {
            f = t.PrivilegeDataCache
        }, function(t) {
            g = t.BaseView
        }],
        execute: function() {
            r._RF.push({}, "5fab1Hts+JEM6mD8J6QNAuN", "WingDungeonFastView", void 0);
            t("default", class extends g {
                constructor() {
                    super(), this.txtRecord = void 0, this.txtTips = void 0, this.rewardScroll = void 0, this.stars = [], this.nodeModel = void 0, this.model = void 0, this.name = "WingDungeonFastView", this.url = "ui/module/wing/WingDungeonFastView"
                }
                onInit() {
                    const t = this.findChild("btnClose");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const o = this.findChild("view/btn");
                    this.addComponentCallbackListener(o, e.EventType.CLICK, (() => {
                        this.openArgs[0] && (IS(c).reqWingQuickPass(this.openArgs[0].type), this.close())
                    })), this.txtRecord = this.findChildComponent("view/record/Label", i), this.txtTips = this.findChildComponent("view/tips/Label", i);
                    const r = this.findChild("view/tips/btnTips");
                    this.addComponentCallbackListener(r, e.EventType.CLICK, (() => {
                        const t = GetLanguage(201852);
                        u.showBoxTip({
                            tip: t,
                            btnCnt: 1,
                            horizontalAlign: s.LEFT
                        })
                    }));
                    const d = this.findChild("view/btnAttr");
                    this.addComponentCallbackListener(d, e.EventType.CLICK, (() => {
                        this.openArgs[0] && uiMgr.openView("WingDungeonBossView", this.openArgs[0])
                    })), this.nodeModel = this.findChild("view/model");
                    for (let t = 1; t <= 5; t++) this.stars[t] = this.findChild("view/stars/star" + t + "/light");
                    const a = this.findChildComponent("view/rewardScroll", n);
                    this.rewardScroll = this.addUIList(a, p)
                }
                registerUpdateHandler() {}
                onAfterOpen() {
                    const t = this.openArgs[0],
                        e = this.openArgs[1],
                        i = configDark_trial_chapter.getDatas(),
                        s = i.find((e => e.part_type == t.type && e.level == t.max_level)),
                        n = 0 == t.max_level ? 0 : o.formatStr("%s-%s", s.difficulty, s.star);
                    this.txtRecord.string = o.formatStr(GetLanguage(201887), n);
                    const r = i.find((i => i.part_type == t.type && i.level == e)),
                        a = configUnitModel.getDataByKey(r.bossModel);
                    this.model && this.removeUIEffect(this.model), this.model = this.addUIEffect(a.path, this.nodeModel, -1, new d(0, 0), a.scale / 100 * 2);
                    const l = 0 == t.max_level ? 0 : o.formatStr("%s-%s", r.difficulty, r.star);
                    this.txtTips.string = o.formatStr(GetLanguage(201889), l);
                    for (let t = 1; t < this.stars.length; t++) {
                        this.stars[t].active = r.star >= t
                    }
                    const h = [];
                    for (const e of i)
                        if (e.part_type == t.type && e.level >= t.cur_level && e.level <= t.max_level)
                            for (const t of e.daily_reward) h[t[0]] || (h[t[0]] = {
                                id: t[0],
                                num: 0
                            }), h[t[0]].num = h[t[0]].num + t[1];
                    const c = [],
                        u = IS(f).getPrivilegeCardInfo(5);
                    for (const t in h) h.hasOwnProperty(t) && (u && (h[t].num = Math.floor(1.5 * h[t].num)), c.push(h[t]));
                    c.sort(((t, e) => {
                        const i = configGoods.getDataByKey(t.id),
                            s = configGoods.getDataByKey(e.id);
                        return i.quality == s.quality ? t.id - e.id : s.quality - i.quality
                    })), this.rewardScroll.datas = c
                }
                onBeforeClose() {}
                onDestroy() {}
            });
            class p extends l {
                constructor(...t) {
                    super(...t), this.itemGridNode = void 0, this.itemGrid = void 0
                }
                onInit() {
                    this.itemGridNode = h.findChild(this.node, "itemGrid"), this.itemGrid = new a(this.view, this.itemGridNode)
                }
                onRender(t, e) {
                    this.itemGrid.SetItemId(t.id, t.num)
                }
            }
            r._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingDungeonTipsView.ts", ["cc", "./index52.ts", "./BaseView.ts"], function(e) {
    "use strict";
    var n, i, t;
    return {
        setters: [function(e) {
            n = e.Button, i = e.cclegacy
        }, null, function(e) {
            t = e.BaseView
        }],
        execute: function() {
            i._RF.push({}, "0c532m+T/dBibaehgjJvAxD", "WingDungeonTipsView", void 0);
            e("default", class extends t {
                constructor() {
                    super(), this.name = "WingDungeonTipsView", this.url = "ui/module/wing/WingDungeonTipsView"
                }
                onInit() {
                    const e = this.findChild("imgMask");
                    this.addComponentCallbackListener(e, n.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const i = this.findChild("btn1");
                    this.addComponentCallbackListener(i, n.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const t = this.findChild("btn2");
                    this.addComponentCallbackListener(t, n.EventType.CLICK, (() => {
                        uiMgr.openView("PrivilegeCardView", 5), this.close()
                    }))
                }
                registerUpdateHandler() {}
                onAfterOpen() {}
                onBeforeClose() {}
                onDestroy() {}
            }), i._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingDungeonView.ts", ["cc", "./V2.ts", "./ItemGrid.ts", "./UIList.ts", "./NodeUtil.ts", "./TimeUtil.ts", "./index52.ts", "./ConfigGlobal.ts", "./ChapterDataCache.ts", "./ChapterDefine.ts", "./DungeonControl.ts", "./MessageView.ts", "./PrivilegeDataCache.ts", "./PrivilegeDefine.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var e, i, s, n, o, a, l, r, h, d, f, c, u, v, g, C, p, m, w, b, I, L;
    return {
        setters: [function(t) {
            e = t.Button, i = t.HorizontalTextAlignment, s = t.js, n = t.Sprite, o = t.RichText, a = t.Label, l = t.ScrollView, r = t.cclegacy
        }, function(t) {
            h = t.V2
        }, function(t) {
            d = t.ItemGrid
        }, function(t) {
            f = t.ListItem
        }, function(t) {
            c = t.default
        }, function(t) {
            u = t.default
        }, null, function(t) {
            v = t.ConfigGlobal
        }, function(t) {
            g = t.ChapterDataCache
        }, function(t) {
            C = t.ChapterEventDefine, p = t.DungeonDefine
        }, function(t) {
            m = t.default
        }, function(t) {
            w = t.default
        }, function(t) {
            b = t.PrivilegeDataCache
        }, function(t) {
            I = t.PrivilegeEventDefine
        }, function(t) {
            L = t.BaseView
        }],
        execute: function() {
            r._RF.push({}, "ce2ab2HXRpKYohp+uYTEnvL", "WingDungeonView", void 0);
            const x = 2,
                R = 3,
                _ = {
                    [1]: p.CHAPTER_TYPE_DARK_TRIAL,
                    [x]: p.CHAPTER_TYPE_DARK_TRIAL_2,
                    [R]: p.CHAPTER_TYPE_DARK_TRIAL_3
                };
            t("default", class extends L {
                constructor() {
                    super(), this.txtTitle = void 0, this.txtRecord = void 0, this.txtTips = void 0, this.stars = [], this.nodeReward = void 0, this.nodeLimit = void 0, this.firstReward = void 0, this.normalReward = void 0, this.btnFight = void 0, this.btnFast = void 0, this.btnReset = void 0, this.txtReset = void 0, this.extReward = void 0, this.curIndex = 0, this.tabBtns = [], this.info = void 0, this.lastMaxLevel = 0, this.fastLevel = 0, this.nodeModel = void 0, this.model = void 0, this.name = "WingDungeonView", this.url = "ui/module/wing/WingDungeonView"
                }
                onInit() {
                    const t = this.findChild("btnClose");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const r = this.findChild("view/btnAttr");
                    this.addComponentCallbackListener(r, e.EventType.CLICK, (() => {
                        this.info && uiMgr.openView("WingDungeonBossView", this.info)
                    }));
                    const h = this.findChild("view/tips/btnTips");
                    this.addComponentCallbackListener(h, e.EventType.CLICK, (() => {
                        const t = GetLanguage(201852);
                        w.showBoxTip({
                            tip: t,
                            btnCnt: 1,
                            horizontalAlign: i.LEFT
                        })
                    })), this.btnFight = this.findChild("view/btns/btnFight"), this.addComponentCallbackListener(this.btnFight, e.EventType.CLICK, (() => {
                        if (!this.info) return;
                        const t = configDark_trial_chapter.getDatas().find((t => t.part_type == this.info.type && t.level == this.info.cur_level)),
                            e = u.serverOpenTime;
                        var i = u.ServerDate(1e3 * e),
                            n = s.formatStr("%s/%s/%s %s:%s:%s", i.getFullYear(), i.getMonth() + 1, i.getDate(), 0, 0, 0);
                        const o = u.getServerDateByLocalStr(n).getTime() / 1e3,
                            a = u.serverTime - o,
                            l = Math.floor(a / 86400 + 1);
                        if (l < t.time_limit) w.showFlyTip(GetLanguage(200279));
                        else {
                            for (const e of t.difficulty_adjust)
                                if (e[0] == l) {
                                    const i = e[1];
                                    let n;
                                    for (const t of i) 1001 == t[0] && (n = t[1]);
                                    const o = s.formatStr(GetLanguage(200280), n / 100);
                                    return void w.showBoxTip({
                                        tip: o,
                                        title: GetLanguage(200048),
                                        ensure: GetLanguage(200053),
                                        cancel: GetLanguage(200054),
                                        func: e => {
                                            "type_yes" == e && (uiMgr.closeAllView(["MainView", "MessageView", "GuideView", "BattleHubView"]), IS(m).reqDungeonBattleStart(this.info.type, this.info.cur_level), battleMain.enterChapter(t.bossModel))
                                        }
                                    })
                                } uiMgr.closeAllView(["MainView", "MessageView", "GuideView", "BattleHubView"]), IS(m).reqDungeonBattleStart(this.info.type, this.info.cur_level), battleMain.enterChapter(t.bossModel)
                        }
                    })), this.btnFast = this.findChild("view/btns/btnFast"), this.addComponentCallbackListener(this.btnFast, e.EventType.CLICK, (() => {
                        this.info && uiMgr.openView("WingDungeonFastView", this.info, this.fastLevel)
                    })), this.btnReset = this.findChildComponent("view/btns/btnReset", n), this.txtReset = this.findChildComponent("view/btns/btnReset/Label", o), this.addComponentCallbackListener(this.btnReset.node, e.EventType.CLICK, (() => {
                        if (this.info) {
                            let t = 0;
                            const e = IS(b).getPrivilegeCardInfo(5),
                                i = IS(b).getPrivilegeCardInfo(2);
                            e && t++, i && t++;
                            let s = 0;
                            for (const {
                                    k: t,
                                    v: e
                                }
                                of this.info.ext) 11 == t && (s = e);
                            if (s = t - s, s > 0) w.showBoxTip({
                                tip: GetLanguage(201965),
                                func: t => {
                                    "type_yes" == t && IS(m).reqWingReset(this.info.type)
                                }
                            });
                            else {
                                if (!e) return void uiMgr.openView("WingDungeonTipsView");
                                w.showFlyTip(GetLanguage(201966))
                            }
                        }
                    }));
                    for (let t = 1; t <= 3; t++) {
                        let i = this.findChild(s.formatStr("tab/scrollTab/view/content/item%s", t)),
                            n = {
                                itemGo: i,
                                normalGo: c.findChild(i, "normal"),
                                selectedGo: c.findChild(i, "selected"),
                                index: t
                            };
                        this.addComponentCallbackListener(i, e.EventType.CLICK, (() => {
                            this.setIndex(n.index)
                        })), this.tabBtns[t] = n
                    }
                    this.txtTitle = this.findChildComponent("view/title/Label", a), this.txtRecord = this.findChildComponent("view/record/Label", a), this.txtTips = this.findChildComponent("view/tips/Label", a);
                    for (let t = 1; t <= 5; t++) this.stars[t] = this.findChild("view/stars/star" + t + "/light");
                    this.nodeModel = this.findChild("view/model"), this.nodeReward = this.findChild("view/reward"), this.nodeLimit = this.findChild("view/limit"), this.extReward = this.findChild("view/reward/normal/ext");
                    const d = c.findChildComponent(this.node, "view/reward/first/rewardScroll", l);
                    this.firstReward = this.addUIList(d, y), this.firstReward.lackCenter = !0;
                    const f = c.findChildComponent(this.node, "view/reward/normal/rewardScroll", l);
                    this.normalReward = this.addUIList(f, y), this.normalReward.lackCenter = !0
                }
                registerUpdateHandler() {
                    this.addEvent(C.DUNGEON_UPDATE, this.updateInfo, this), this.addEvent(I.PRIVILEGE_CARD_UPDATE, this.updateBtnReset, this)
                }
                onAfterOpen() {
                    const t = this.openArgs[0];
                    if (t) {
                        for (let e = 1; e <= 3; e++) this.tabBtns[e].itemGo.active = e == t;
                        this.setIndex(t)
                    }
                }
                onBeforeClose() {
                    this.lastMaxLevel = 0, this.fastLevel = 0, this.curIndex > 0 && (this.tabBtns[this.curIndex].normalGo.active = !0, this.tabBtns[this.curIndex].selectedGo.active = !1, this.curIndex = 0)
                }
                onDestroy() {}
                setIndex(t) {
                    this.curIndex != t && (this.curIndex > 0 && (this.tabBtns[this.curIndex].selectedGo.active = !1, this.tabBtns[this.curIndex].normalGo.active = !0), this.curIndex = t, this.tabBtns[this.curIndex].normalGo.active = !1, this.tabBtns[this.curIndex].selectedGo.active = !0, this.updateInfo())
                }
                updateInfo() {
                    if (0 == this.curIndex) return;
                    const t = _[this.curIndex],
                        e = IS(g).getDungeonInfoByID(t);
                    if (!e) return;
                    this.info = e, this.updateBtnReset();
                    const i = configDark_trial_chapter.getDatas(),
                        n = i.find((i => i.part_type == t && i.level == e.cur_level)),
                        o = configUnitModel.getDataByKey(n.bossModel);
                    this.model && this.removeUIEffect(this.model), this.model = this.addUIEffect(o.path, this.nodeModel, -1, new h(0, 0), o.scale / 100 * 2), this.txtTitle.string = s.formatStr(GetLanguage(201888), n.difficulty);
                    for (let t = 1; t < this.stars.length; t++) {
                        this.stars[t].active = n.star >= t
                    }
                    const a = i.find((i => i.part_type == t && i.level == e.max_level));
                    let l = 0;
                    a && a.star < 5 ? l = a.difficulty - 1 : a && a.star >= 5 && (l = a.difficulty);
                    const r = 0 == e.max_level ? 0 : s.formatStr("%s-%s", a.difficulty, a.star);
                    let d;
                    this.txtRecord.string = s.formatStr(GetLanguage(201887), r);
                    for (const {
                            k: t,
                            v: i
                        }
                        of e.ext) 6 == t ? this.lastMaxLevel = i : 10 == t && (d = 1 == i);
                    const f = i.find((e => e.part_type == t && e.level == this.lastMaxLevel));
                    let c = 0;
                    if (f && f.star < 5 ? c = f.difficulty - 1 : f && f.star >= 5 && (c = f.difficulty), c += v.back_trial_chapter_difficulty_dailyunlock, c = Math.min(i[i.length - 1].difficulty, c), this.txtTips.string = s.formatStr(GetLanguage(201886), c), d) this.nodeLimit.active = !0, this.nodeReward.active = !1, this.btnFight.active = !1, this.btnFast.active = !1;
                    else if (this.nodeLimit.active = !1, this.nodeReward.active = !0, this.firstReward.datas = n.first_reward, this.normalReward.datas = n.daily_reward, l >= 3) {
                        this.fastLevel = a.level;
                        let s = i.find((e => e.part_type == t && e.level == a.level + 1));
                        s && s.difficulty <= c && (this.fastLevel = s.level), this.btnFight.active = e.cur_level >= this.fastLevel, this.btnFast.active = e.cur_level < this.fastLevel
                    } else this.btnFight.active = !0, this.btnFast.active = !1
                }
                updateBtnReset() {
                    this.btnReset.node.active = this.info.cur_level > 1;
                    let t = 0;
                    const e = IS(b).getPrivilegeCardInfo(5),
                        i = IS(b).getPrivilegeCardInfo(2);
                    if (e && t++, i && t++, this.extReward.active = e, this.info.cur_level <= 1) return;
                    let n = 0;
                    for (const {
                            k: t,
                            v: e
                        }
                        of this.info.ext) 11 == t && (n = e);
                    if (n = t - n, e || i) {
                        this.btnReset.grayscale = 0 == n;
                        const e = s.formatStr(GetLanguage(201964), n, t);
                        this.txtReset.string = s.formatStr("<b><outline color=#21294d width=2><color=#fbfbf9>%s</color></outline></b>", e)
                    } else this.btnReset.grayscale = !0, this.txtReset.string = s.formatStr("<b><outline color=#564948 width=2><color=#fffd59>%s</color></outline></b>", GetLanguage(201963))
                }
            });
            class y extends f {
                constructor(...t) {
                    super(...t), this.itemGridNode = void 0, this.itemGrid = void 0, this.isGet = void 0, this.mask = void 0
                }
                onInit() {
                    this.itemGridNode = c.findChild(this.node, "itemGrid"), this.itemGrid = new d(this.view, this.itemGridNode), this.isGet = c.findChild(this.node, "isGet"), this.mask = c.findChild(this.node, "mask")
                }
                onRender(t, e) {
                    this.itemGrid.SetItemId(t[0], t[1]);
                    const i = this.view.info;
                    this.isGet && (this.isGet.active = i && i.max_level >= i.cur_level), this.mask && (this.mask.active = i && i.max_level >= i.cur_level)
                }
            }
            r._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingGetView.ts", ["cc", "./V2.ts", "./index52.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var e, i, s, n, o;
    return {
        setters: [function(t) {
            e = t.Button, i = t.Sprite, s = t.cclegacy
        }, function(t) {
            n = t.V2
        }, null, function(t) {
            o = t.BaseView
        }],
        execute: function() {
            s._RF.push({}, "24a85EiRo1F2aVl2BtUUd4J", "WingGetView", void 0);
            t("default", class extends o {
                constructor() {
                    super(), this.imgTitle = void 0, this.WingID = void 0, this.WingItemNode = void 0, this.ModelID = void 0, this.isGoods = !1, this.name = "WingGetView", this.url = "ui/module/wing/WingGetView", this.poolTime = 3e3
                }
                onInit() {
                    const t = this.findChild("imgMask");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        this.close()
                    })), this.WingItemNode = this.findChild("root/content/Item"), this.imgTitle = this.findChildComponent("root/content/title", i)
                }
                onAfterOpen() {
                    this.WingID = this.openArgs[0], this.refreshShow()
                }
                refreshShow() {
                    this.ModelID = this.addUIEffect(configBack_decoration.getDataByKey(this.WingID).path, this.WingItemNode, -1, new n(0, 0))
                }
                registerUpdateHandler() {}
                onBeforeClose() {
                    this.removeUIEffect(this.ModelID)
                }
                onDestroy() {}
            }), s._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingSkillPlanSelectView.ts", ["cc", "./UIList.ts", "./NodeUtil.ts", "./StringUtil.ts", "./index52.ts", "./ItemIcon.ts", "./WingDataCache.ts", "./RoleControl.ts", "./RoleDataCache.ts", "./RoleDefine.ts", "./BaseView.ts"], function(i) {
    "use strict";
    var t, e, n, s, l, o, a, h, c, d, k, r, S, g, I, f, m, v, C;
    return {
        setters: [function(i) {
            t = i.Button, e = i.UITransform, n = i.Node, s = i.ScrollView, l = i.Label, o = i.Overflow, a = i.Sprite, h = i.js, c = i.cclegacy
        }, function(i) {
            d = i.SelectedType, k = i.ListItem
        }, function(i) {
            r = i.default
        }, function(i) {
            S = i.default
        }, null, function(i) {
            g = i.IconAseetType
        }, function(i) {
            I = i.WingDataCache
        }, function(i) {
            f = i.default
        }, function(i) {
            m = i.RoleDataCache
        }, function(i) {
            v = i.RoleEventDefine
        }, function(i) {
            C = i.BaseView
        }],
        execute: function() {
            c._RF.push({}, "2da8cVdASZDJolMTmTWWyBQ", "WingSkillPlanSelectView", void 0);
            i("default", class extends C {
                constructor() {
                    super(), this.btnUseSkill = void 0, this.btnNoUseSkill = void 0, this.curPlan = void 0, this.skinIDSel = void 0, this.curPlanSkillId = void 0, this.WingUIList = void 0, this.wingInfo = [], this.txtName = void 0, this.name = "WingSkillPlanSelectView", this.url = "ui/module/role/WingSkillPlanSelectView"
                }
                onInit() {
                    const i = this.findChild("imgMask");
                    this.addComponentCallbackListener(i, t.EventType.CLICK, (() => {
                        this.onCloseClick()
                    })), this.btnUseSkill = this.findChild("content/nodeSkill/btnUse"), this.addComponentCallbackListener(this.btnUseSkill, t.EventType.CLICK, (() => {
                        IS(f).send_role_update_plan_c2s(this.curPlan, [{
                            k: 6,
                            v: this.skinIDSel
                        }])
                    })), this.btnNoUseSkill = this.findChild("content/nodeSkill/btnNoUse"), this.addComponentCallbackListener(this.btnNoUseSkill, t.EventType.CLICK, (() => {
                        IS(f).send_role_update_plan_c2s(this.curPlan, [{
                            k: 6,
                            v: 0
                        }])
                    }));
                    const o = this.findChild("content/nodeSkill/ScrollView/view/content/item"),
                        a = this.findChildComponent("content/nodeSkill/ScrollView/view/content", e);
                    o.on(n.EventType.SIZE_CHANGED, (() => {
                        a.height = o.getComponent(e).height
                    }));
                    const h = this.findChildComponent("content/nodeSelect/ScrollView", s);
                    this.WingUIList = this.addUIList(h, _), this.WingUIList.selectedMode = d.SINGLE, this.txtName = this.findChildComponent("content/nodeSkill/common_ui_xiaotidi/txtName-001", l)
                }
                onCloseClick() {
                    this.close()
                }
                registerUpdateHandler() {
                    this.addEvent(v.PLAN_ARTIFACT_SKIN_EFFECT_SEL, this.onRefreshWingSel, this), this.addEvent(v.PLAN_INFO_UPDATE, this.onPlanInfoUpdate, this)
                }
                onAfterOpen() {
                    this.txtName.schedule((() => {
                        const i = this.txtName.node.getComponent(e);
                        i.width >= 368 ? (this.txtName.overflow = o.SHRINK, i.width = 368) : this.txtName.overflow = o.NONE
                    }), 0), this.curPlan = this.openArgs[0], this.rebuildWingList(), this.skinIDSel = this.wingInfo[0].skin, this.refreshAll()
                }
                refreshAll() {
                    this.refreshWingShow(), this.refreshWingSkill(), this.refreshUseSkillBtn()
                }
                refreshWingShow() {
                    var i = this.rebuildWingList();
                    this.WingUIList.datas = this.wingInfo, this.WingUIList.scrollTo(i)
                }
                onRefreshWingSel(i) {
                    this.skinIDSel != i && (this.skinIDSel = i, this.refreshAll())
                }
                onPlanInfoUpdate(i) {
                    i == this.curPlan && this.refreshAll()
                }
                rebuildWingList() {
                    const i = configBack_skin.getDataByList("skin_level", 0);
                    var t = 0;
                    this.wingInfo = [];
                    for (const [t, n] of i.entries())
                        if (IS(I).checkWingCanShow(n.back_id)) {
                            var e = IS(I).getSkinLevelByID(n.back_id);
                            this.wingInfo.push({
                                skin: n.back_id,
                                level: e,
                                state: IS(I).getWingState(n.back_id)
                            })
                        } this.wingInfo.sort(((i, t) => i.state > t.state ? -1 : 1));
                    for (const [i, e] of this.wingInfo.entries()) e.skin == this.skinIDSel && (t = i);
                    return t
                }
                refreshWingSkill() {
                    const i = this.findChildComponent("content/nodeSkill/Frame", a),
                        t = this.findChildComponent("content/nodeSkill/Icon", a),
                        e = this.findChildComponent("content/nodeSkill/txtName", l),
                        n = this.findChildComponent("content/nodeSkill/ScrollView/view/content/item", l);
                    var s = configBack_skin.getDataByKeys("back_id", this.skinIDSel, "skin_level", IS(I).getSkinLevelByID(this.skinIDSel));
                    0 == s.skin_skill.length && (s = configBack_skin.getDataByKeys("back_id", this.skinIDSel, "skin_level", IS(I).getSkinLevelByID(this.skinIDSel) + 1));
                    const o = configSkill.getDataByKey(s.skin_skill[0][0]);
                    this.loadIcon(i, "icon_skill", h.formatStr("common_ICON_jinengkuang0%s", o.quality)), this.loadIcon(t, "icon_skill", o.icon, null, g.ICON_SPRITE), e.string = o.name;
                    const c = configSkill_level.getDataByKeys("id", s.skin_skill[0][0], "level", s.skin_skill[0][1]);
                    n.string = S.formatStr(c.desc, ...c.desc_parm)
                }
                refreshUseSkillBtn() {
                    const i = IS(m).planIdToInfo[this.curPlan].detail;
                    this.curPlanSkillId = 0;
                    for (let t = 0; t < i.length; t++) 6 == i[t].k && (this.curPlanSkillId = i[t].v);
                    if (IS(I).getSkinLevelByID(this.skinIDSel) <= 0) return this.btnUseSkill.active = !1, void(this.btnNoUseSkill.active = !1);
                    this.btnUseSkill.active = this.curPlanSkillId != this.skinIDSel, this.btnNoUseSkill.active = this.curPlanSkillId == this.skinIDSel
                }
                onBeforeClose() {}
                onDestroy() {}
            });
            class _ extends k {
                constructor(...i) {
                    super(...i), this.imgFrame = void 0, this.imgIcon = void 0, this.imgLock = void 0, this.nodeUse = void 0, this.nodeSel = void 0
                }
                onInit() {
                    this.imgFrame = r.findChildComponent(this.node, "frame", a), this.imgIcon = r.findChildComponent(this.node, "icon", a), this.imgLock = r.findChild(this.node, "lock"), this.nodeUse = r.findChild(this.node, "nodeUse"), this.nodeSel = r.findChild(this.node, "sel")
                }
                onRender(i, t) {
                    this.data = i;
                    var e = configBack_decoration.getDataByKey(this.data.skin).icon_small,
                        n = configBack_decoration.getDataByKey(this.data.skin).quality,
                        s = configColor.getDataByKey(n).path;
                    this.view.loadIcon(this.imgFrame, "icon_equip", s), this.view.loadIcon(this.imgIcon, "icon_item", e), this.checkState();
                    const l = this.view;
                    this.nodeSel.active = l.skinIDSel == this.data.skin
                }
                checkState() {
                    this.imgLock.active = !1, this.imgFrame.grayscale = !1, this.imgIcon.grayscale = !1, this.nodeUse.active = !1, 1 == this.data.state && (this.imgLock.active = !0, this.imgFrame.grayscale = !0, this.imgIcon.grayscale = !0);
                    var i = configBack_skin.getDataByKeys("back_id", this.data.skin, "skin_level", IS(I).getSkinLevelByID(this.data.skin));
                    0 == i.skin_skill.length && (i = configBack_skin.getDataByKeys("back_id", this.data.skin, "skin_level", IS(I).getSkinLevelByID(this.data.skin) + 1));
                    const t = this.view;
                    this.nodeUse.active = this.data.skin == t.curPlanSkillId
                }
                onItemClick() {
                    normalEvent.emit(v.PLAN_ARTIFACT_SKIN_EFFECT_SEL, this.data.skin)
                }
            }
            c._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingSkinView.ts", ["cc", "./ItemGrid.ts", "./UIList.ts", "./NodeUtil.ts", "./StringUtil.ts", "./index52.ts", "./ItemIcon.ts", "./BagModel.ts", "./WingControl.ts", "./WingDataCache.ts", "./WingDefine.ts", "./BaseSubView.ts"], function(i) {
    "use strict";
    var t, e, n, s, o, h, l, d, a, c, r, g, k, I, f, S, C, v, m, b;
    return {
        setters: [function(i) {
            t = i.Button, e = i.ScrollView, n = i.UITransform, s = i.Node, o = i.Vec3, h = i.Label, l = i.Sprite, d = i.js, a = i.cclegacy
        }, function(i) {
            c = i.ItemGrid
        }, function(i) {
            r = i.SelectedType, g = i.ListItem
        }, function(i) {
            k = i.default
        }, function(i) {
            I = i.default
        }, null, function(i) {
            f = i.IconAseetType
        }, function(i) {
            S = i.BagModel
        }, function(i) {
            C = i.default
        }, function(i) {
            v = i.WingDataCache
        }, function(i) {
            m = i.WingEvent
        }, function(i) {
            b = i.BaseSubView
        }],
        execute: function() {
            a._RF.push({}, "4fbc16JKYxCv666nveHX9kL", "WingSkinView", void 0);
            i("default", class extends b {
                constructor() {
                    super(), this.nodeRoot = void 0, this.btnUnlock = void 0, this.btnUse = void 0, this.btnCancel = void 0, this.btnLeft = void 0, this.btnRight = void 0, this.nodeItem = void 0, this.nodeTop = void 0, this.WingUIList = void 0, this.starUIList = void 0, this.imgFrame = void 0, this.imgIcon = void 0, this.wingEffectID = 0, this.btnUseSkill = void 0, this.btnNoUseSkill = void 0, this.btnUpgrade = void 0, this.showSkinId = void 0, this.iconOriPos = void 0, this.skinIDSel = void 0, this.starInfo = [], this.wingInfo = [], this.name = "WingSkinView", this.url = "ui/module/wing/WingSkinView", this.poolTime = 3e3
                }
                onInit() {
                    this.nodeRoot = this.findChild("root"), this.btnUnlock = this.findChild("root/btnUnlock"), this.addComponentCallbackListener(this.btnUnlock, t.EventType.CLICK, (() => {
                        IS(C).send_wing_skin_level_up_c2s(this.skinIDSel)
                    })), this.addComponentCallbackListener(this.findChild("root/previewBtn"), t.EventType.CLICK, (() => {
                        IS(C).previewBattle(this.skinIDSel)
                    })), this.btnUseSkill = this.findChild("root/nodeSkill/btnUse"), this.addComponentCallbackListener(this.btnUseSkill, t.EventType.CLICK, (() => {
                        IS(C).send_wing_skill_use_c2s(this.skinIDSel)
                    })), this.btnUpgrade = this.findChild("root/nodeSkill/btnUpgrade"), this.addComponentCallbackListener(this.btnUpgrade, t.EventType.CLICK, (() => {
                        uiMgr.openView("WingUpgradeInfoView", this.skinIDSel, IS(v).getSkinLevelByID(this.skinIDSel))
                    })), this.btnNoUseSkill = this.findChild("root/nodeSkill/btnNoUse"), this.addComponentCallbackListener(this.btnNoUseSkill, t.EventType.CLICK, (() => {
                        IS(C).send_wing_skill_use_c2s(0)
                    })), this.btnCancel = this.findChild("root/nodeShow/btnCancel"), this.addComponentCallbackListener(this.btnCancel, t.EventType.CLICK, (() => {
                        IS(C).send_wing_use_c2s(0)
                    })), this.btnUse = this.findChild("root/nodeShow/btnUse"), this.addComponentCallbackListener(this.btnUse, t.EventType.CLICK, (() => {
                        IS(C).send_wing_use_c2s(this.skinIDSel)
                    })), this.btnLeft = this.findChild("root/nodeShow/btnLeft"), this.addComponentCallbackListener(this.btnLeft, t.EventType.CLICK, (() => {
                        for (const i of this.wingInfo)
                            if (i.skin == this.skinIDSel) {
                                this.skinIDSel = this.wingInfo[this.wingInfo.indexOf(i) - 1].skin;
                                break
                            } this.refreshAll()
                    })), this.btnRight = this.findChild("root/nodeShow/btnRight"), this.addComponentCallbackListener(this.btnRight, t.EventType.CLICK, (() => {
                        for (const i of this.wingInfo)
                            if (i.skin == this.skinIDSel) {
                                this.skinIDSel = this.wingInfo[this.wingInfo.indexOf(i) + 1].skin;
                                break
                            } this.refreshAll()
                    }));
                    const i = this.findChildComponent("root/ScrollView", e);
                    this.WingUIList = this.addUIList(i, D), this.WingUIList.selectedMode = r.SINGLE;
                    const h = this.findChildComponent("root/nodeShow/ScrollView", e);
                    this.starUIList = this.addUIList(h, w), this.nodeItem = this.findChild("root/item"), this.nodeTop = this.findChild("root/nodeTop");
                    const l = this.findChild("root/nodeSkill/ScrollView/view/content/item"),
                        d = this.findChildComponent("root/nodeSkill/ScrollView/view/content", n);
                    l.on(s.EventType.SIZE_CHANGED, (() => {
                        d.height = l.getComponent(n).height
                    }));
                    const a = this.findChild("root/nodeShow/icon");
                    this.iconOriPos = new o(a.position.x, a.position.y, 0)
                }
                rebuildWingList() {
                    const i = configBack_skin.getDataByList("skin_level", 0);
                    var t = 0;
                    this.wingInfo = [];
                    for (const [t, n] of i.entries())
                        if (IS(v).checkWingCanShow(n.back_id)) {
                            var e = IS(v).getSkinLevelByID(n.back_id);
                            this.wingInfo.push({
                                skin: n.back_id,
                                level: e,
                                state: IS(v).getWingState(n.back_id)
                            })
                        } this.wingInfo.sort(((i, t) => i.state > t.state ? -1 : 1));
                    for (const [i, e] of this.wingInfo.entries()) e.skin == this.skinIDSel && (t = i);
                    return t
                }
                onAfterOpen() {
                    this.showSkinId = null, this.rebuildWingList(), this.skinIDSel = this.wingInfo[0].skin, this.refreshAll()
                }
                refreshAll() {
                    this.refreshWingShow(), this.refreshWingSkill(), this.refreshWingAttr(), this.refreshWingChange(), this.refreshItemNum(), this.refreshUseSkillBtn()
                }
                registerUpdateHandler() {
                    this.addEvent(m.TYPE_WING_CHANGE, this.onSkinStateChange, this), this.addEvent(m.TYPE_WING_SKIN_EFFECT_SEL, this.onRefreshWingSel, this), this.addEvent(m.TYPE_WING_USE_SKILL, this.refreshUseSkillBtn, this)
                }
                refreshItemNum() {
                    const i = this.findChildComponent("root/nodeItem/Label", h);
                    var t = IS(S).getGoodsCountByGoodsGtid(1);
                    i.string = `${t}`
                }
                refreshUseSkillBtn() {
                    IS(v).getSkinLevelByID(this.skinIDSel) <= 0 ? (this.btnUseSkill.active = !1, this.btnNoUseSkill.active = !1) : (this.btnUseSkill.active = IS(v).skill_use != this.skinIDSel, this.btnNoUseSkill.active = IS(v).skill_use == this.skinIDSel)
                }
                onSkinStateChange() {
                    IS(v).getSkinLevelByID(this.skinIDSel) ? this.btnUse.active = !0 : this.btnUse.active = !1, this.skinIDSel == IS(v).wing_id ? this.btnCancel.active = !0 : this.btnCancel.active = !1, this.refreshWingShow(), this.refreshWingSkill(), this.refreshWingAttr(), this.refreshItemNum(), this.refreshUseSkillBtn()
                }
                refreshWingSkill() {
                    const i = k.findChildComponent(this.nodeRoot, "nodeSkill/Frame", l),
                        t = k.findChildComponent(this.nodeRoot, "nodeSkill/Icon", l),
                        e = k.findChildComponent(this.nodeRoot, "nodeSkill/txtName", h),
                        n = k.findChildComponent(this.nodeRoot, "nodeSkill/ScrollView/view/content/item", h);
                    var s = configBack_skin.getDataByKeys("back_id", this.skinIDSel, "skin_level", IS(v).getSkinLevelByID(this.skinIDSel));
                    0 == s.skin_skill.length && (s = configBack_skin.getDataByKeys("back_id", this.skinIDSel, "skin_level", IS(v).getSkinLevelByID(this.skinIDSel) + 1));
                    const o = configSkill.getDataByKey(s.skin_skill[0][0]),
                        a = IS(v).getSkinLevelByID(this.skinIDSel);
                    a ? a < 10 && (this.btnUpgrade.active = !0) : this.btnUpgrade.active = !1, this.loadIcon(i, "icon_skill", d.formatStr("common_ICON_jinengkuang0%s", o.quality)), this.loadIcon(t, "icon_skill", o.icon, null, f.ICON_SPRITE), e.string = o.name;
                    const c = configSkill_level.getDataByKeys("id", s.skin_skill[0][0], "level", s.skin_skill[0][1]);
                    n.string = I.formatStr(c.desc, ...c.desc_parm)
                }
                refreshWingShow() {
                    if (this.showSkinId != this.skinIDSel) {
                        this.showSkinId = this.skinIDSel;
                        const i = this.findChild("root/nodeShow/icon"),
                            t = this.findChildComponent("root/nodeShow/bgName/txtName", h);
                        this.removeUIEffect(this.wingEffectID), this.wingEffectID = this.addUIEffect(configBack_decoration.getDataByKey(this.skinIDSel).path, i, -1);
                        const e = configBack_decoration.getDataByKey(this.skinIDSel);
                        t.string = e.name, i.position = new o(this.iconOriPos.x, 0 != e.back_location_adjust ? e.back_location_adjust : this.iconOriPos.y, 0)
                    }
                    var i = this.rebuildWingList();
                    this.WingUIList.datas = this.wingInfo, this.WingUIList.scrollTo(i), this.starInfo = [0, 0, 0, 0, 0];
                    for (var t = 0; t < IS(v).getSkinLevelByID(this.skinIDSel); t++) {
                        var e = t % 5;
                        this.starInfo[e] += 1
                    }
                    this.starUIList.datas = this.starInfo
                }
                onRefreshWingSel(i) {
                    this.skinIDSel != i && (this.skinIDSel = i, this.refreshAll())
                }
                refreshWingAttr() {
                    const i = this.findChildComponent("root/nodeChange/txtBase", h),
                        t = this.findChildComponent("root/nodeChange/txtNext", h),
                        e = this.findChildComponent("root/nodeChange/txtEffect", h);
                    var n = configBack_skin.getDataByKeys("back_id", this.skinIDSel, "skin_level", IS(v).getSkinLevelByID(this.skinIDSel)),
                        s = configBack_skin.getDataByKeys("back_id", this.skinIDSel, "skin_level", IS(v).getSkinLevelByID(this.skinIDSel) + 1),
                        o = this.findChild("root/nodeChange/txtNext"),
                        l = this.findChildComponent("root/btnUnlock/txtLabel", h);
                    if (null == n.expend || 0 == n.expend.length) l.string = GetLanguage(200127), e.string = configAttribute.getDataByKey(Number(n.attr[0][0])).name + ":", i.string = n.attr[0][1] / 100 + "%", o.active = !1, this.nodeItem.active = !1, this.btnUnlock.active = !1, this.btnUpgrade.active = !1, this.nodeTop.active = !0;
                    else {
                        o.active = !0, this.nodeItem.active = !0, this.btnUnlock.active = !0, this.nodeTop.active = !1, new c(this, this.nodeItem).SetItemId(n.expend[0][0], 0);
                        let d = IS(S).getGoodsCountByGoodsGtid(n.expend[0][0]),
                            a = n.expend[0][1];
                        this.findChildComponent("root/item/txtNext", h).string = `${d}/${a}`, e.string = configAttribute.getDataByKey(Number(s.attr[0][0])).name + ":", null == n.attr || 0 == n.attr.length ? (i.string = "0%", t.string = s.attr[0][1] / 100 + "%", l.string = GetLanguage(200101)) : (i.string = n.attr[0][1] / 100 + "%", t.string = s.attr[0][1] / 100 + "%", l.string = GetLanguage(200128))
                    }
                }
                refreshWingChange() {
                    if (this.checkPageBtn(), this.showSkinId == this.skinIDSel) return;
                    this.showSkinId = this.skinIDSel;
                    const i = this.findChild("root/nodeShow/icon"),
                        t = this.findChildComponent("root/nodeShow/txtName", h);
                    this.removeUIEffect(this.wingEffectID), this.wingEffectID = this.addUIEffect(configBack_decoration.getDataByKey(this.skinIDSel).path, i, -1);
                    const e = configBack_decoration.getDataByKey(this.skinIDSel);
                    t.string = e.name
                }
                checkPageBtn() {
                    this.btnLeft.active = !0, this.btnRight.active = !0;
                    for (const i of this.wingInfo) i.skin == this.skinIDSel && (0 == this.wingInfo.indexOf(i) && (this.btnLeft.active = !1), this.wingInfo.indexOf(i) == this.wingInfo.length - 1 && (this.btnRight.active = !1));
                    IS(v).getSkinLevelByID(this.skinIDSel) ? this.btnUse.active = !0 : this.btnUse.active = !1, this.skinIDSel == IS(v).wing_id ? this.btnCancel.active = !0 : this.btnCancel.active = !1
                }
                onBeforeClose() {
                    this.wingEffectID && (this.removeUIEffect(this.wingEffectID), this.wingEffectID = null)
                }
                onDestroy() {}
            });
            class D extends g {
                constructor(...i) {
                    super(...i), this.imgFrame = void 0, this.imgIcon = void 0, this.imgLock = void 0, this.imgRP = void 0, this.nodeUse = void 0, this.nodeSel = void 0
                }
                onInit() {
                    this.imgFrame = k.findChildComponent(this.node, "frame", l), this.imgIcon = k.findChildComponent(this.node, "icon", l), this.imgLock = k.findChild(this.node, "lock"), this.imgRP = k.findChild(this.node, "rp"), this.nodeUse = k.findChild(this.node, "nodeUse"), this.nodeSel = k.findChild(this.node, "sel")
                }
                onRender(i, t) {
                    this.data = i;
                    var e = configBack_decoration.getDataByKey(this.data.skin).icon_small,
                        n = configBack_decoration.getDataByKey(this.data.skin).quality,
                        s = configColor.getDataByKey(n).path;
                    this.view.loadIcon(this.imgFrame, "icon_equip", s), this.view.loadIcon(this.imgIcon, "icon_item", e), this.checkState();
                    const o = this.view;
                    this.nodeSel.active = o.skinIDSel == this.data.skin
                }
                checkState() {
                    this.imgLock.active = !1, this.imgRP.active = !1, this.imgFrame.grayscale = !1, this.imgIcon.grayscale = !1, this.nodeUse.active = !1, 1 == this.data.state ? (this.imgLock.active = !0, this.imgFrame.grayscale = !0, this.imgIcon.grayscale = !0) : (5 == this.data.state || IS(v).GetWingCanUp(this.data.skin)) && (this.imgRP.active = !0), this.data.skin == IS(v).wing_id && (this.nodeUse.active = !0)
                }
                onItemClick() {
                    normalEvent.emit(m.TYPE_WING_SKIN_EFFECT_SEL, this.data.skin)
                }
            }
            class w extends g {
                constructor(...i) {
                    super(...i), this.imgOne = void 0, this.imgTwo = void 0, this.imgThree = void 0, this.imgDark = void 0
                }
                onInit() {
                    this.imgOne = k.findChild(this.node, "one"), this.imgTwo = k.findChild(this.node, "two"), this.imgThree = k.findChild(this.node, "three"), this.imgDark = k.findChild(this.node, "dark")
                }
                onRender(i, t) {
                    this.imgDark.active = 0 == i, this.imgOne.active = 1 == i, this.imgTwo.active = 2 == i, this.imgThree.active = 3 == i
                }
                onItemClick() {}
            }
            a._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingTalentUpgradeView.ts", ["cc", "./RedPoint.ts", "./RedPointMgr.ts", "./StringUtil.ts", "./index52.ts", "./BagModel.ts", "./WingControl.ts", "./WingDataCache.ts", "./WingDefine.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var i, n, e, o, s, l, h, d, a, c, r, u, g, C, p;
    return {
        setters: [function(t) {
            i = t.Button, n = t.Sprite, e = t.Label, o = t.Vec2, s = t.Color, l = t.cclegacy
        }, function(t) {
            h = t.RedPointType
        }, function(t) {
            d = t.RedPointNode
        }, function(t) {
            a = t.default
        }, null, function(t) {
            c = t.BagModel
        }, function(t) {
            r = t.default
        }, function(t) {
            u = t.WingDataCache
        }, function(t) {
            g = t.WingColorIcon, C = t.WingEvent
        }, function(t) {
            p = t.BaseView
        }],
        execute: function() {
            l._RF.push({}, "2970caiuelJw69kZAMoWQ46", "WingTalentUpgradeView", void 0);
            t("default", class extends p {
                constructor() {
                    super(), this.talentId = void 0, this.isEnough = void 0, this.colorBg = void 0, this.icon = void 0, this.skillName = void 0, this.skillLevel = void 0, this.twoAttr = void 0, this.curNode = void 0, this.curOneContent = void 0, this.curTwoContent = void 0, this.nextTwoContent = void 0, this.costNum = void 0, this.curNum = void 0, this.unlockDes = void 0, this.upBtn = void 0, this.upBtnRed = void 0, this.name = "WingTalentUpgradeView", this.url = "ui/module/wing/WingTalentUpgradeView", this.poolTime = 3e3
                }
                onInit() {
                    this.addComponentCallbackListener(this.findChild("imgMask"), i.EventType.CLICK, (() => {
                        this.close()
                    })), this.addComponentCallbackListener(this.findChild("root/closeBtn"), i.EventType.CLICK, (() => {
                        this.close()
                    })), this.colorBg = this.findChildComponent("root/skillItem/colorBg", n), this.icon = this.findChildComponent("root/skillItem/icon", n), this.skillName = this.findChildComponent("root/name", e), this.skillLevel = this.findChildComponent("root/level", e), this.curOneContent = this.findChildComponent("root/cur/content", e), this.twoAttr = this.findChild("root/TwoAttr"), this.curNode = this.findChild("root/cur"), this.curTwoContent = this.findChildComponent("root/TwoAttr/cur/content", e), this.nextTwoContent = this.findChildComponent("root/TwoAttr/next/content", e), this.curNum = this.findChildComponent("root/item/num", e), this.costNum = this.findChildComponent("root/btn/txtNum", e), this.unlockDes = this.findChildComponent("root/unlockDes", e), this.upBtn = this.findChildComponent("root/btn", n), this.addComponentCallbackListener(this.upBtn.node, i.EventType.CLICK, (() => {
                        if (!this.isEnough) return;
                        let t = configBack_talent.getDataByKeys("id", this.talentId, "level", 1);
                        IS(r).send_wing_talent_lev_up_c2s(t.job_type, this.talentId)
                    })), this.upBtnRed = new d, this.upBtnRed.addRedPoint(this.upBtn.node, new o(120, 35), h.Dot)
                }
                onAfterOpen() {
                    this.talentId = this.openArgs[0], this.UpdateInfo()
                }
                UpdateInfo() {
                    let t = IS(u).GetTalentInfo(this.talentId),
                        i = configBack_talent.getDataByKeys("id", this.talentId, "level", t);
                    i || (i = configBack_talent.getDataByKeys("id", this.talentId, "level", 1));
                    let n = configBack_talent.getDataListByMainKey("id");
                    this.skillName.string = i.name, this.skillLevel.string = "LV." + t + "/" + n[this.talentId].length;
                    let e = configBack_talent.getDataByKeys("id", this.talentId, "level", t + 1);
                    this.loadIcon(this.colorBg, "back", g[i.color_type]), this.loadIcon(this.icon, "back", i.icon);
                    let o = IS(c).getGoodsCountByGoodsGtid(1085);
                    if (e) {
                        if (this.unlockDes.string = "", this.curNode.active = !1, this.twoAttr.active = !0, this.upBtn.node.active = !0, 0 == t) {
                            let t = IS(u).GetTalentIsActive(this.talentId);
                            this.upBtn.node.active = t, t ? this.unlockDes.string = "" : (this.unlockDes.color = new s("#ca1414"), 0 == i.condition_1.length ? this.unlockDes.string = GetLanguage(202020) : IS(u).GetTalentlevIsFull(this.talentId) ? this.unlockDes.string = a.formatStr(GetLanguage(201818), i.condition_1[0][1]) : this.unlockDes.string = GetLanguage(204786));
                            let n = [];
                            for (let t = 0; t < i.desc_parm.length; t++) n.push(0);
                            this.curTwoContent.string = a.formatStr(i.describe, ...n)
                        } else this.curTwoContent.string = a.formatStr(i.describe, ...i.desc_parm);
                        this.nextTwoContent.string = a.formatStr(e.describe, ...e.desc_parm), this.isEnough = o >= e.cost[0][1], this.costNum.string = e.cost[0][1], this.costNum.color = this.isEnough ? new s("#00a100") : new s("#ca1414"), this.upBtn.grayscale = !this.isEnough, this.upBtnRed.notifyNum = this.isEnough ? 1 : 0
                    } else this.upBtn.node.active = !1, this.unlockDes.color = new s("#00a100"), this.unlockDes.string = GetLanguage(201819), this.curNode.active = !0, this.twoAttr.active = !1, this.curOneContent.string = a.formatStr(i.describe, ...i.desc_parm);
                    this.curNum.string = o
                }
                registerUpdateHandler() {
                    this.addEvent(C.TYPE_WING_TALENT_CHANGE, this.UpdateInfo, this)
                }
                onBeforeClose() {}
                onDestroy() {}
            }), l._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingTalentView.ts", ["cc", "./RedPoint.ts", "./RedPointMgr.ts", "./NodeUtil.ts", "./index52.ts", "./BagModel.ts", "./MessageView.ts", "./RoleDataCache.ts", "./WingControl.ts", "./WingDataCache.ts", "./WingDefine.ts", "./BaseSubView.ts"], function(t) {
    "use strict";
    var e, i, n, o, s, l, d, a, h, c, r, f, p, u, g, m, C, I;
    return {
        setters: [function(t) {
            e = t.Button, i = t.Vec2, n = t.Label, o = t.cclegacy, s = t.UITransform, l = t.Sprite, d = t.Color
        }, function(t) {
            a = t.RedPointType
        }, function(t) {
            h = t.RedPointNode
        }, function(t) {
            c = t.default
        }, null, function(t) {
            r = t.BagModel
        }, function(t) {
            f = t.default
        }, function(t) {
            p = t.RoleDataCache
        }, function(t) {
            u = t.default
        }, function(t) {
            g = t.WingDataCache
        }, function(t) {
            m = t.WingEvent, C = t.WingColorIcon
        }, function(t) {
            I = t.BaseSubView
        }],
        execute: function() {
            o._RF.push({}, "e6eb17Eh+1LpJBUsMlu9GpL", "WingTalentView", void 0);
            t("default", class extends I {
                constructor() {
                    super(), this.tabList = {}, this.talentList = {}, this.num = void 0, this.selectedType = void 0, this.name = "WingTalentView", this.url = "ui/module/wing/WingTalentView", this.poolTime = 3e3
                }
                onInit() {
                    for (let t = 1; t <= 3; t++) {
                        let n = {
                            item: this.findChild("root/tabContain/item" + t),
                            selected: this.findChild("root/tabContain/item" + t + "/selected"),
                            redPoint: null
                        };
                        this.addComponentCallbackListener(this.findChild("root/tabContain/item" + t), e.EventType.CLICK, (() => {
                            this.selectType(t)
                        })), n.redPoint = new h, n.redPoint.addRedPoint(n.item, new i(64, 17), a.Dot), this.tabList[t] = n
                    }
                    for (let t = 1; t <= 30; t++) this.talentList[t] = new T(this, this.findChild("root/ScrollView/view/content/SkillItem/" + t), this.findChild("root/ScrollView/view/content/lineItem/" + t));
                    this.addComponentCallbackListener(this.findChild("root/resetBtn"), e.EventType.CLICK, (() => {
                        f.showBoxTip({
                            tip: GetLanguage(201811),
                            title: GetLanguage(200048),
                            func: t => {
                                "type_yes" == t && IS(u).send_wing_talent_reset_c2s(this.selectedType)
                            }
                        })
                    })), this.num = this.findChildComponent("root/nodeItem/Label", n);
                    const t = this.findChild("root/nodeItem");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        IS(r).OpenItemTips(1085, t)
                    }))
                }
                onAfterOpen() {
                    this.selectedType = null;
                    let t = IS(p).GetJob(),
                        e = configJobs.getDataByKey(t);
                    this.selectType({
                        1: 1,
                        2: 1,
                        5: 1,
                        3: 2,
                        6: 2,
                        4: 3,
                        7: 3
                    } [e.type]), this.UpdateTabRed()
                }
                registerUpdateHandler() {
                    this.addEvent(m.TYPE_WING_TALENT_CHANGE, this.updateTalenet), this.addEvent(m.TYPE_WING_TALENT_RED_CHANGE, this.UpdateTabRed)
                }
                selectType(t) {
                    if (t != this.selectedType) {
                        this.selectedType = t;
                        for (const t in this.tabList) this.tabList[t].selected.active = this.selectedType == Number(t);
                        this.updateTalenet()
                    }
                }
                UpdateTabRed() {
                    for (const t in this.tabList) this.tabList[t].redPoint.notifyNum = IS(g).GetTalenTypeRed(Number(t))
                }
                updateTalenet() {
                    let t = configBack_talent.getDataListByMainKey("id");
                    for (const e in t) {
                        let i = t[e][0],
                            n = i.id - 1e3 * Math.floor(i.id / 1e3);
                        i.job_type == this.selectedType && this.talentList[n] && this.talentList[n].onRender({
                            color_type: i.color_type,
                            connect_id: i.connect_id,
                            id: i.id,
                            icon: i.icon,
                            maxLevel: t[e].length
                        })
                    }
                    let e = IS(r).getGoodsCountByGoodsGtid(1085);
                    this.num.string = e
                }
                onBeforeClose() {}
                onDestroy() {}
            });
            class T {
                constructor(t, e, i) {
                    this.lineItem = void 0, this.talentItem = void 0, this.view = void 0, this.colorBg = void 0, this.icon = void 0, this.level = void 0, this.redPoint = void 0, this.lineList = [], this.data = void 0, this.view = t, this.talentItem = e, this.lineItem = i, this.onInit()
                }
                onInit() {
                    this.redPoint = new h;
                    let t = c.findChildComponent(this.talentItem, "", s).contentSize;
                    if (this.redPoint.addRedPoint(this.talentItem, new i(.28 * t.width, .28 * t.height), a.Dot), this.view.addComponentCallbackListener(this.talentItem, e.EventType.CLICK, (() => {
                            uiMgr.openView("WingTalentUpgradeView", this.data.id)
                        })), this.colorBg = c.findChildComponent(this.talentItem, "colorBg", l), this.icon = c.findChildComponent(this.talentItem, "icon", l), this.level = c.findChildComponent(this.talentItem, "Label", n), this.lineItem)
                        for (let t = 0; t < this.lineItem.children.length; t++) {
                            let e = this.lineItem.children[t];
                            this.lineList.push({
                                id: Number(e.name),
                                highlight: c.findChild(e, "icon")
                            })
                        }
                }
                onRender(t) {
                    this.data = t, this.view.loadIcon(this.icon, "back", t.icon), this.view.loadIcon(this.colorBg, "back", C[t.color_type]), this.UpdateTalent()
                }
                UpdateTalent() {
                    let t = IS(g).GetTalentInfo(this.data.id);
                    this.redPoint.notifyNum = IS(g).GetTalenRedById(this.data.id);
                    let e = IS(g).GetTalentIsActive(this.data.id);
                    this.level.string = e ? t + "/" + this.data.maxLevel : "", this.colorBg.node.active = e, this.icon.color = new d(255, 255, 255, e ? 255 : 128);
                    let i = {},
                        n = configBack_talent.getDataListByMainKey("id");
                    for (let t = 0; t < this.data.connect_id.length; t++) {
                        let e = this.data.connect_id[t];
                        for (let t = 1; t <= 2; t++) {
                            let o = n[e][0];
                            if (o["condition_" + t].length > 0)
                                for (let n = 0; n < o["condition_" + t].length; n++) {
                                    let s = o["condition_" + t][n][0];
                                    if (s == this.data.id) {
                                        let l = o["condition_" + t][n][1];
                                        IS(g).GetTalentInfo(s) >= l && (i[e - 1e3 * Math.floor(e / 1e3)] = !0)
                                    }
                                }
                        }
                    }
                    for (let t = 0; t < this.lineList.length; t++) {
                        let e = this.lineList[t].id;
                        this.lineList[t].highlight.active = i[e]
                    }
                }
            }
            o._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingUpgradeInfoView.ts", ["cc", "./StringUtil.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var e, n, i, o, s, c, d;
    return {
        setters: [function(t) {
            e = t.Button, n = t.Label, i = t.UITransform, o = t.Node, s = t.cclegacy
        }, function(t) {
            c = t.default
        }, function(t) {
            d = t.BaseView
        }],
        execute: function() {
            s._RF.push({}, "c0e66FDAfdF+ocoY3T9j6Rr", "WingUpgradeInfoView", void 0);
            t("default", class extends d {
                constructor() {
                    super(), this.txtCurName = void 0, this.txtNextName = void 0, this.txtCurDesc = void 0, this.txtNextDesc = void 0, this.nodeStar1 = void 0, this.nodeStar2 = void 0, this.nextLevel = 5, this.id = void 0, this.arrowLeft = void 0, this.arrowRight = void 0, this.name = "WingUpgradeInfoView", this.url = "ui/module/wing/WingUpgradeInfoView", this.fullScreen = !1
                }
                onInit() {
                    const t = this.findChild("imgMask");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        this.close()
                    })), this.arrowLeft = this.findChild("content/nodeNextEffect/arrowLeft"), this.addComponentCallbackListener(this.arrowLeft, e.EventType.CLICK, (() => {
                        this.nextLevel = 5, this.updateNextInfo()
                    })), this.arrowRight = this.findChild("content/nodeNextEffect/arrowRight"), this.addComponentCallbackListener(this.arrowRight, e.EventType.CLICK, (() => {
                        this.nextLevel = 10, this.updateNextInfo()
                    })), this.txtCurName = this.findChildComponent("content/nodeCurEffect/content/txtCurName", n), this.txtNextName = this.findChildComponent("content/nodeNextEffect/content/txtNextName", n), this.txtCurDesc = this.findChildComponent("content/nodeCurEffect/content/ScrollView/view/content/item", n), this.txtNextDesc = this.findChildComponent("content/nodeNextEffect/content/ScrollView/view/content/item", n), this.nodeStar1 = this.findChild("content/nodeNextEffect/nodeName/nodeStar1"), this.nodeStar2 = this.findChild("content/nodeNextEffect/nodeName/nodeStar2");
                    const s = this.findChild("content/nodeCurEffect/content/ScrollView/view/content/item"),
                        c = this.findChildComponent("content/nodeCurEffect/content/ScrollView/view/content", i);
                    s.on(o.EventType.SIZE_CHANGED, (() => {
                        c.height = s.getComponent(i).height
                    }));
                    const d = this.findChild("content/nodeNextEffect/content/ScrollView/view/content/item"),
                        h = this.findChildComponent("content/nodeNextEffect/content/ScrollView/view/content", i);
                    d.on(o.EventType.SIZE_CHANGED, (() => {
                        h.height = d.getComponent(i).height
                    }))
                }
                registerUpdateHandler() {}
                onAfterOpen() {
                    this.updateInfo(this.openArgs[0], this.openArgs[1])
                }
                onBeforeClose() {}
                onDestroy() {}
                updateInfo(t, e) {
                    this.nextLevel = e < 5 ? 5 : 10, this.id = t;
                    let n = configBack_skin.getDataByKeys("back_id", t, "skin_level", e);
                    const i = configSkill.getDataByKey(n.skin_skill[0][0]);
                    this.txtCurName.string = i.name, this.txtNextName.string = i.name;
                    const o = configSkill_level.getDataByKeys("id", n.skin_skill[0][0], "level", n.skin_skill[0][1]);
                    this.txtCurDesc.string = c.formatStr(o.desc, ...o.desc_parm), this.updateNextInfo()
                }
                updateNextInfo() {
                    this.arrowLeft.active = 10 == this.nextLevel, this.arrowRight.active = 5 == this.nextLevel, this.nodeStar1.active = 5 == this.nextLevel, this.nodeStar2.active = 10 == this.nextLevel;
                    let t = configBack_skin.getDataByKeys("back_id", this.id, "skin_level", this.nextLevel);
                    const e = configSkill_level.getDataByKeys("id", t.skin_skill[0][0], "level", t.skin_skill[0][1]);
                    this.txtNextDesc.string = c.formatStr(e.desc, ...e.desc_parm)
                }
            }), s._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingUpgradeView.ts", ["cc", "./UIList.ts", "./RedPoint.ts", "./RedPointMgr.ts", "./NodeUtil.ts", "./StringUtil.ts", "./index52.ts", "./ConfigGlobal.ts", "./BagModel.ts", "./MessageView.ts", "./WingControl.ts", "./WingDataCache.ts", "./WingDefine.ts", "./BaseSubView.ts"], function(t) {
    "use strict";
    var e, i, n, o, s, h, d, r, a, l, c, f, g, C, u, v, p, w, b, I, m, k;
    return {
        setters: [function(t) {
            e = t.Button, i = t.Vec2, n = t.Label, o = t.ProgressBar, s = t.ScrollView, h = t.RichText, d = t.js, r = t.Color, a = t.cclegacy, l = t.Sprite
        }, function(t) {
            c = t.ListItem
        }, function(t) {
            f = t.RedPointType
        }, function(t) {
            g = t.RedPointNode
        }, function(t) {
            C = t.default
        }, function(t) {
            u = t.default
        }, null, function(t) {
            v = t.ConfigGlobal
        }, function(t) {
            p = t.BagModel
        }, function(t) {
            w = t.default
        }, function(t) {
            b = t.default
        }, function(t) {
            I = t.WingDataCache
        }, function(t) {
            m = t.WingEvent
        }, function(t) {
            k = t.BaseSubView
        }],
        execute: function() {
            a._RF.push({}, "eb663OjJXpCyak8GI5V9fo6", "WingUpgradeView", void 0);
            t("default", class extends k {
                constructor() {
                    super(), this.nodeRoot = void 0, this.btnOne = void 0, this.btnTen = void 0, this.btnUse = void 0, this.btnCancel = void 0, this.pbExp = void 0, this.pbText = void 0, this.nodeUnlock = void 0, this.nodeUnlockDes = void 0, this.featureList = void 0, this.featureLevel = void 0, this.showRoot = void 0, this.showName = void 0, this.artifactEffectID = 0, this.attrName = void 0, this.attrBase = void 0, this.attrNextArrow = void 0, this.attrNext = void 0, this.btnOneNum = void 0, this.btnTenNum = void 0, this.tenRedPoint = void 0, this.btnLeft = void 0, this.btnRight = void 0, this.showID = void 0, this.showEffId = void 0, this.showOrder = 0, this.txtLevel = void 0, this.selectedFeature = 0, this.bookRed = void 0, this.btnTop = void 0, this.name = "WingUpgradeView", this.url = "ui/module/wing/WingUpgradeView", this.poolTime = 3e3
                }
                onInit() {
                    this.nodeRoot = this.findChild("root");
                    const t = this.findChild("root/nodeItem");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        IS(p).OpenItemTips(1084, t)
                    }));
                    const n = this.findChild("root/bookBtn");
                    this.bookRed = new g, this.bookRed.addRedPoint(n, new i(23, 30), f.Dot), this.addComponentCallbackListener(n, e.EventType.CLICK, (() => {
                        uiMgr.openView("WingBookView")
                    })), this.InitWingInfo()
                }
                InitWingInfo() {
                    this.showRoot = this.findChild("root/nodeShow/icon"), this.showName = this.findChildComponent("root/nodeShow/bgName/txtName", n), this.btnLeft = this.findChild("root/nodeShow/btnLeft"), this.addComponentCallbackListener(this.btnLeft, e.EventType.CLICK, (() => {
                        this.showOrder--;
                        let t = v.back_decoration_unlock[this.showOrder][0];
                        this.showID = t, this.refreshWingShow(), this.checkPageBtn()
                    })), this.btnRight = this.findChild("root/nodeShow/btnRight"), this.addComponentCallbackListener(this.btnRight, e.EventType.CLICK, (() => {
                        this.showOrder++;
                        let t = v.back_decoration_unlock[this.showOrder][0];
                        this.showID = t, this.refreshWingShow(), this.checkPageBtn()
                    })), this.nodeUnlock = this.findChild("root/nodeShow/nodeUnlock"), this.nodeUnlockDes = this.findChildComponent("root/nodeShow/nodeUnlock/level", n), this.txtLevel = this.findChildComponent("root/nodeProgress/ProgressBar/Node", n), this.pbExp = this.findChildComponent("root/nodeProgress/ProgressBar", o), this.pbText = this.findChildComponent("root/nodeProgress/ProgressBar/txtDesc", n), this.btnCancel = this.findChild("root/nodeShow/btnCancel"), this.addComponentCallbackListener(this.btnCancel, e.EventType.CLICK, (() => {
                        IS(b).send_wing_use_c2s(0)
                    })), this.btnUse = this.findChild("root/nodeShow/btnUse"), this.addComponentCallbackListener(this.btnUse, e.EventType.CLICK, (() => {
                        IS(b).send_wing_use_c2s(this.showID)
                    })), this.btnOne = this.findChild("root/nodeChange/btnOne"), this.addComponentCallbackListener(this.btnOne, e.EventType.CLICK, (() => {
                        this.onClickOne()
                    })), this.btnTop = this.findChild("root/nodeChange/btnTop"), this.btnOneNum = this.findChildComponent("root/nodeChange/btnOne/txtNum", n), this.btnTen = this.findChild("root/nodeChange/btnTen"), this.addComponentCallbackListener(this.btnTen, e.EventType.CLICK, (() => {
                        this.onClickTen()
                    })), this.tenRedPoint = new g, this.tenRedPoint.addRedPoint(this.btnTen, new i(100, 30), f.Dot), this.btnTenNum = this.findChildComponent("root/nodeChange/btnTen/txtNum", n), this.featureList = this.addUIList(this.findChildComponent("root/nodeFeather/ScrollView", s), S), this.featureList.lackCenter = !0, this.featureLevel = this.findChildComponent("root/nodeFeather/level", h), this.attrName = this.findChildComponent("root/nodeChange/item/txtAttrName", n), this.attrBase = this.findChildComponent("root/nodeChange/item/txtAttrBase", n), this.attrNextArrow = this.findChild("root/nodeChange/item/arrow"), this.attrNext = this.findChildComponent("root/nodeChange/item/txtAttrNext", n)
                }
                onAfterOpen() {
                    this.showEffId = null, this.selectedFeature = null, this.showOrder = 0, this.showID = v.back_decoration_unlock[this.showOrder][0], this.SelectFeature(1001), this.refreshUpgradeShow(), this.RefreshBookRed()
                }
                registerUpdateHandler() {
                    this.addEvent(m.TYPE_WING_CHANGE, this.refreshUpgradeShow, this), this.addEvent(m.TYPE_WING_CHANGE, this.UpdateFeatureInfo, this), this.addEvent(m.TYPE_WING_BOOK_RED_CHANGE, this.RefreshBookRed, this)
                }
                RefreshBookRed() {
                    this.bookRed.notifyNum = IS(I).GetCollectionRed()
                }
                refreshFeature() {
                    let t = configBack_level.getDataListByMainKey("id"),
                        e = [];
                    for (const i in t) e.push(t[i][0]);
                    this.featureList.datas = e
                }
                SelectFeature(t) {
                    this.selectedFeature != t && (this.selectedFeature = t, this.featureList.updateAll(), this.UpdateFeatureInfo())
                }
                UpdateFeatureInfo() {
                    let t = this.selectedFeature,
                        e = IS(I).GetFeatureInfo(t),
                        i = configBack_level.getDataListByKey(t),
                        n = 0;
                    for (let t = 0; t < i.length; t++) 0 == i[t].era_level && (n += 1);
                    let o = configBack_level.getDataByKeys("id", t, "level", 1),
                        s = configAttribute.getDataByKey(o.attr[0][0]),
                        h = o,
                        r = 0;
                    if (e.level > 0) {
                        h = configBack_level.getDataByKeys("id", t, "level", e.level), r = configBack_level.getDataByKeys("id", t, "level", e.level + IS(I).GetBookAddLev()).attr[0][1]
                    }
                    let a = configBack_level.getDataByKeys("id", t, "level", e.level + 1);
                    if (this.attrName.string = s.name, 2 == s.show_type ? this.attrBase.string = d.formatStr("%s%", u.GetNumString(r / 100)) : 3 == s.show_type ? this.attrBase.string = u.GetNumString(Math.floor(r / 100) / 100) : this.attrBase.string = u.GetNumString(r), a && 1 != a.era_level) {
                        this.btnTop.active = !1, this.btnOne.active = !0, this.btnTen.active = !0, this.attrNextArrow.active = !0, 2 == s.show_type ? this.attrNext.string = d.formatStr("%s%", u.GetNumString(a.attr[0][1] / 100)) : 3 == s.show_type ? this.attrNext.string = u.GetNumString(Math.floor(a.attr[0][1] / 100) / 100) : this.attrNext.string = u.GetNumString(a.attr[0][1]);
                        let t = e.exp - h.expend_exp,
                            i = a.expend_exp - h.expend_exp;
                        this.pbExp.progress = t / i, this.pbText.string = t + "/" + i
                    } else this.btnTop.active = !0, this.btnOne.active = !1, this.btnTen.active = !1, this.attrNextArrow.active = !1, this.attrNext.string = "", this.pbExp.progress = 1, this.pbText.string = h.expend_exp + "/" + h.expend_exp;
                    let l = e.level;
                    IS(I).GetBookAddLev() > 0 && (l = d.formatStr("%s<color=#00a100>(+%s)</color>", l, IS(I).GetBookAddLev())), this.featureLevel.string = d.formatStr("<b><color=#544231>%s</color></b>", u.formatStr(GetLanguage(201816), l, n)), this.refreshItemNum()
                }
                onClickOne() {
                    IS(p).getGoodsCountByGoodsGtid(1084) < 1 ? (w.showFlyTip(GetLanguage(200069)), uiMgr.openView("ItemGetWayView", 1084)) : IS(b).send_wing_feather_level_up_c2s(this.selectedFeature, 1)
                }
                onClickTen() {
                    IS(p).getGoodsCountByGoodsGtid(1084) < 1 ? (w.showFlyTip(GetLanguage(200069)), uiMgr.openView("ItemGetWayView", 1084)) : IS(b).send_wing_feather_level_up_c2s(this.selectedFeature, 2)
                }
                checkOneKeyShow() {
                    let t = this.selectedFeature;
                    var e = IS(p).getGoodsCountByGoodsGtid(1084);
                    let i = IS(I).GetFeatureInfo(t);
                    this.btnTenNum.color = new r(0 == e ? "#F33F28" : "#67E355"), this.btnOneNum.color = new r(0 == e ? "#F33F28" : "#67E355");
                    let n = configBack_level.getDataByKeys("id", t, "level", i.level + 1);
                    if (null != n) {
                        var o = n.expend_exp;
                        o -= i.exp, this.btnTenNum.string = e >= o ? `X${o}` : `X${e}`, this.tenRedPoint.notifyNum = IS(I).GetWingRedById(this.selectedFeature)
                    } else this.btnTenNum.string = "X1"
                }
                refreshWingShow() {
                    if (this.checkPageBtn(), this.showEffId == this.showID) return;
                    this.showEffId = this.showID;
                    const t = configBack_decoration.getDataByKey(this.showID);
                    this.showName.string = t.name, this.removeUIEffect(this.artifactEffectID), this.artifactEffectID = this.addUIEffect(configBack_decoration.getDataByKey(this.showID).path, this.showRoot, -1)
                }
                checkPageBtn() {
                    this.btnLeft.active = this.showOrder > 0, this.btnRight.active = this.showOrder < v.back_decoration_unlock.length - 1;
                    let [t, e] = IS(I).GetWingIsOpen(this.showID);
                    if (!t) return this.btnUse.active = !1, this.btnCancel.active = !1, this.nodeUnlock.active = !0, void(this.nodeUnlockDes.string = u.formatStr(GetLanguage(201817), e));
                    this.nodeUnlock.active = !1, this.showID == IS(I).wing_id ? (this.btnCancel.active = !0, this.btnUse.active = !1) : (this.btnCancel.active = !1, this.btnUse.active = !0)
                }
                refreshItemNum() {
                    this.checkOneKeyShow();
                    const t = this.findChildComponent("root/nodeItem/Label", n);
                    var e = IS(p).getGoodsCountByGoodsGtid(1084);
                    t.string = `${e}`
                }
                refreshUpgradeShow() {
                    this.refreshFeature(), this.refreshWingShow()
                }
                onBeforeClose() {
                    this.removeUIEffect(this.artifactEffectID), this.artifactEffectID = null
                }
                onDestroy() {}
            });
            class S extends c {
                constructor(...t) {
                    super(...t), this.level = void 0, this.icon = void 0, this.select = void 0, this.redPoint = void 0
                }
                onInit() {
                    this.redPoint = new g, this.redPoint.addRedPoint(this.node, new i(90, -50), f.Dot), this.view.addComponentCallbackListener(this.node, e.EventType.CLICK, (() => {
                        this.view.SelectFeature(this.data.id)
                    })), this.level = C.findChildComponent(this.node, "level", n), this.icon = C.findChildComponent(this.node, "icon", l), this.select = C.findChild(this.node, "select")
                }
                onRender(t, e) {
                    this.view.loadIcon(this.icon, "back", t.icon_show), this.redPoint.notifyNum = IS(I).GetWingRedById(t.id);
                    let i = IS(I).GetFeatureInfo(t.id);
                    this.level.string = i.level, this.select.active = this.view.selectedFeature == t.id
                }
                onItemClick() {}
            }
            a._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WingView.ts", ["cc", "./AudioMgr.ts", "./index52.ts", "./CommonDefine.ts", "./WingDataCache.ts", "./WingDefine.ts", "./BaseTabView.ts", "./UIDefine.ts"], function(e) {
    "use strict";
    var t, i, n, s, a, h, o, d;
    return {
        setters: [function(e) {
            t = e.Button, i = e.cclegacy
        }, function(e) {
            n = e.audioMgr
        }, null, function(e) {
            s = e.CommonEventDefine
        }, function(e) {
            a = e.WingDataCache
        }, function(e) {
            h = e.WingEvent
        }, function(e) {
            o = e.BaseTabView
        }, function(e) {
            d = e.PanelTabType
        }],
        execute: function() {
            i._RF.push({}, "b19a6D2yhVCfKSexajsL7Dz", "WingView", void 0);
            e("default", class extends o {
                constructor() {
                    super(), this.isActive = !1, this.parentView = void 0, this.name = "WingView", this.url = "ui/module/wing/WingView", this.tabTypes = [d.Wing_Upgrade, d.Wing_Talent, d.Wing_Skin]
                }
                registerUpdateHandler() {
                    this.addEvent(s.JUMP_TO_MAIN_VIEW_SELECT_TYPE, this.close, this), this.addEvent(h.TYPE_WING_FEATURE_RED_CHANGE, this.RefreshRed, this), this.addEvent(h.TYPE_WING_TALENT_RED_CHANGE, this.RefreshRed, this), this.addEvent(h.TYPE_WING_SKIN_RED_CHANGE, this.RefreshRed, this)
                }
                canShowType(e) {
                    return !0
                }
                setActive(e) {
                    this.isActive != e && (this.isActive = e, e ? (this.trySetOpenType() || this.trySetDefaultOpenTab(), this.open()) : this.close())
                }
                RefreshRed() {
                    this.setRedPoint(d.Wing_Upgrade, IS(a).GetWingUpgradRed()), this.setRedPoint(d.Wing_Talent, IS(a).GetWingTalentRed()), this.setRedPoint(d.Wing_Skin, IS(a).GetSkinRed())
                }
                trySetDefaultOpenTab() {}
                onAfterOpenTab() {
                    n.playSound("common_jiemian"), this.trySetDefaultOpenTab();
                    const e = this.findChild("imgMask");
                    this.addComponentCallbackListener(e, t.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const i = this.findChild("btnClose");
                    this.addComponentCallbackListener(i, t.EventType.CLICK, (() => {
                        this.close()
                    })), this.RefreshRed()
                }
            }), i._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WorldBossEnterView.ts", ["cc", "./NodeUtil.ts", "./StringUtil.ts", "./TimeUtil.ts", "./index52.ts", "./ConfigGlobal.ts", "./MulLanguageUtil.ts", "./ChapterDataCache.ts", "./ChapterDefine.ts", "./DungeonControl.ts", "./CommonModel.ts", "./MessageView.ts", "./FrameDataCache.ts", "./RankControl.ts", "./RankDefine.ts", "./RoleDataCache.ts", "./RoleDefine.ts", "./DungeonDefine.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var e, n, i, o, s, a, r, d, l, h, f, c, g, m, u, C, p, _, B, v, w, R, y;
    return {
        setters: [function(t) {
            e = t.Button, n = t.Label, i = t.ProgressBar, o = t.Sprite, s = t.cclegacy
        }, function(t) {
            a = t.default
        }, function(t) {
            r = t.default
        }, function(t) {
            d = t.default
        }, null, function(t) {
            l = t.ConfigGlobal
        }, function(t) {
            h = t.default
        }, function(t) {
            f = t.ChapterDataCache
        }, function(t) {
            c = t.DungeonDefine, g = t.ChapterEventDefine
        }, function(t) {
            m = t.default
        }, function(t) {
            u = t.CommonModel
        }, function(t) {
            C = t.default
        }, function(t) {
            p = t.FrameDataCache
        }, function(t) {
            _ = t.default
        }, function(t) {
            B = t.RankDefine
        }, function(t) {
            v = t.RoleDataCache
        }, function(t) {
            w = t.PlayerAttr
        }, function(t) {
            R = t.DungeonEvent
        }, function(t) {
            y = t.BaseView
        }],
        execute: function() {
            s._RF.push({}, "447c0FX4wJLyqNI0UxwQrUd", "WorldBossEnterView", void 0);
            t("default", class extends y {
                constructor() {
                    super(), this.data = void 0, this.txtBestname = void 0, this.txtBuff = void 0, this.nodeBestModel = void 0, this.pbDmg = void 0, this.btnGoto = void 0, this.name = "WorldBossEnterView", this.url = "ui/module/dungeon/WorldBossEnterView", this.poolTime = 3e3
                }
                onInit() {
                    const t = this.findChild("imgMask");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const o = this.findChild("content/btnClose");
                    this.addComponentCallbackListener(o, e.EventType.CLICK, (() => {
                        this.close()
                    }));
                    const s = this.findChild("content/imgBg/btnRank");
                    this.addComponentCallbackListener(s, e.EventType.CLICK, (() => {
                        this.showRank()
                    }));
                    const a = this.findChild("content/imgBg/btnReward");
                    this.addComponentCallbackListener(a, e.EventType.CLICK, (() => {
                        this.showRewardPreview()
                    })), this.btnGoto = this.findChild("content/btnGo"), this.addComponentCallbackListener(this.btnGoto, e.EventType.CLICK, (() => {
                        const t = IS(f).worldBossInfo;
                        if (1 == (null == t ? void 0 : t.is_open))
                            if (t.times > 0) this.startWar();
                            else {
                                const t = configErrorInfo.getDataByKey(199);
                                C.showFlyTip(t.info)
                            }
                        else {
                            const t = configErrorInfo.getDataByKey(198);
                            C.showFlyTip(t.info)
                        }
                    }));
                    const r = this.findChild("content/btnTips");
                    this.addComponentCallbackListener(r, e.EventType.CLICK, (() => {
                        var t = configChapter_type.getDataByKey(c.CHAPTER_TYPE_WORLDBOSS).desc,
                            e = configChapter_type.getDataByKey(c.CHAPTER_TYPE_WORLDBOSS).name;
                        C.showBoxTip({
                            title: e,
                            tip: t,
                            btnCnt: 1
                        })
                    })), this.txtBestname = this.findChildComponent("content/imgBg/nodeBest/txtname", n), this.nodeBestModel = this.findChild("content/imgBg/nodeBest/model"), this.txtBuff = this.findChildComponent("content/imgBg/nodeBuff/txtDesc", n), this.pbDmg = this.findChildComponent("content/nodePb/ProgressBar", i)
                }
                registerUpdateHandler() {
                    this.addEvent(B.RankInfoBack, this.openRankView, this), this.addEvent(R.TYPE_WORLD_BOSS_INFO_CHANGE, this.refreshView, this)
                }
                refreshView() {
                    this.data = IS(f).worldBossInfo, this.data && (this.updaItemInfo(), this.showMyRank(), this.refreshBestInfo(), this.refreshBuffInfo(), this.refreshPbInfo(), this.refreshReward(), this.refreshStatus())
                }
                onAfterOpen() {
                    IS(m).reqWorldBossInfo(), this.refreshView()
                }
                refreshStatus() {
                    const t = IS(f).worldBossInfo;
                    t && (t.is_open ? this.btnGoto.getComponent(o).grayscale = !1 : this.btnGoto.getComponent(o).grayscale = !0)
                }
                refreshReward() {
                    for (var t = 0; t < 2; t++) {
                        const e = this.findChild("content/nodeReward/node" + t),
                            i = a.findChildComponent(e, "txtNum", n),
                            s = l.world_boss_daily_reward;
                        i.string = s[t][1] + "";
                        const r = a.findChildComponent(e, "Sprite", o);
                        this.loadIcon(r, "icon_item", s[t][0] + "")
                    }
                    const e = this.findChild("content/nodeReward"),
                        i = a.findChild(e, "txtFirst");
                    IS(f).worldBossInfo.is_first > 0 ? i.active = !0 : i.active = !1
                }
                refreshPbInfo() {
                    const t = d.getServerOpenDay();
                    var i = configWorld_boss_total_dmg.getDataByKey(t);
                    if (!i && t > 0) {
                        var o = configWorld_boss_total_dmg.getDatas();
                        i = o[o.length - 1]
                    }
                    if (!i) return;
                    const s = IS(f).worldBossInfo.total_hurt;
                    for (var a = 0, l = 0; l < i.total_dmg.length; l++) {
                        var h = this.findChildComponent(`content/nodePb/node${l+1}/txtNum`, n);
                        const t = this.findChild(`content/nodePb/node${l+1}`),
                            o = i.reward_participate[l];
                        if (this.addComponentCallbackListener(t, e.EventType.CLICK, (t => {
                                uiMgr.openView("RewardPreview", {
                                    title: GetLanguage(200151),
                                    rewardList: o
                                })
                            })), h.string = r.GetNumString(i.total_dmg[l], !1, 0), s >= i.total_dmg[l]) a += 1 / i.total_dmg.length, l == i.total_dmg.length - 1 && (a = 1);
                        else {
                            var c = 0;
                            0 == l ? c = s / i.total_dmg[l] / i.total_dmg.length : s - i.total_dmg[l - 1] > 0 && (c = (s - i.total_dmg[l - 1]) / (i.total_dmg[l] - i.total_dmg[l - 1]) / i.total_dmg.length), a += c
                        }
                    }
                    this.pbDmg.progress = a
                }
                refreshBuffInfo() {
                    var t = configWorld_boss_bufflist.getDataByKey(this.data.today_buff);
                    this.txtBuff.string = t.buff_desc
                }
                refreshBestInfo() {
                    const t = this.findChild("content/imgBg/nodeBest/img");
                    let e = this.data.figure;
                    if (!e || 0 == e.job_figure) return this.txtBestname.string = GetLanguage(200038), void(t.active = !0);
                    this.txtBestname.string = this.data.role_name, t.active = !1, this.loadRoleModel(e)
                }
                loadRoleModel(t) {
                    let e = t.hair_figure > 0 && t.hair_figure || 6,
                        n = t.equip_list.length > 0 && IS(u).GetKvListByK(t.equip_list, 0) || 0,
                        i = t.equip_list.length > 1 && IS(u).GetKvListByK(t.equip_list, 1) || 0,
                        o = t.equip_list.length > 2 && IS(u).GetKvListByK(t.equip_list, 2) || 0,
                        s = t.mount_figure || 0,
                        a = t.skin_list || [],
                        r = 0;
                    for (let t = 0; t < a.length; t++) 2 == a[t].k && (r = a[t].v);
                    let d = t.gender || 1,
                        l = t.artifact_figure || 0;
                    this.nodeBestModel.removeAllChildren(), this.addUnitModel({
                        job: t.job_figure,
                        parent: this.nodeBestModel,
                        dressId: r,
                        gender: d,
                        color: e,
                        weapon: n,
                        ornaments: i,
                        face: o,
                        mount: s,
                        shenqi: l
                    })
                }
                showMyRank() {
                    const t = this.findChildComponent("content/meRank/imgFrame/frame/imgIcon", o),
                        e = this.findChildComponent("content/meRank/imgFrame/frame/imgHeadFrame", o),
                        i = this.findChildComponent("content/meRank/name", n),
                        s = this.findChildComponent("content/meRank/rank", n),
                        a = this.findChildComponent("content/meRank/score", n),
                        d = this.findChildComponent("content/meRank/no_rank", n),
                        l = this.findChildComponent("content/meRank/power", n),
                        h = IS(v);
                    let f = h.GetRoleAttr(w.ROLE_ATTR_HEAD_URL);
                    this.loadRemoteIcon(f, t);
                    let c = IS(p).curFrameId;
                    if (c > 0) {
                        let t = configAvatar_frame.getDataByKey(c);
                        this.loadIcon(e, "icon_frame", t.icon), e.node.active = !0
                    } else e.node.active = !1;
                    this.data && (0 == this.data.my_rank ? (d.node.active = !0, s.node.active = !1) : (d.node.active = !1, s.node.active = !0), s.string = this.data.my_rank > 0 ? this.data.my_rank + "" : "-", i.string = h.GetRoleName(), a.string = `Lv.${h.GetLevel()}`, l.string = r.GetNumString(this.data.my_hurt))
                }
                startWar() {
                    this.data.times <= 0 ? C.showFlyTip(GetLanguage(200152)) : (IS(m).reqDungeonBattleMoreStart(c.CHAPTER_TYPE_WORLDBOSS, 1), battleMain.enterChapter(0, !0), normalEvent.emit(g.DUNGEON_ENTER), this.close())
                }
                showRank() {
                    let t = new Array;
                    t.push({
                        type: 1020,
                        server: 1,
                        page: 1
                    }), IS(_).reqRankList(t)
                }
                openRankView(t) {
                    if (uiMgr.getOpenView("CommonRankView")) return;
                    const e = {
                        title: GetLanguage(200153),
                        desType: 1
                    };
                    uiMgr.openView("CommonRankView", t, e)
                }
                showRewardPreview() {
                    var t = h.GetconfigLanguage_Text(104144);
                    C.showBoxTip({
                        tip: t.text,
                        title: GetLanguage(200154),
                        btnCnt: 1,
                        horizontalAlign: 0
                    })
                }
                updaItemInfo() {
                    if (!this.data) return;
                    const t = this.data.times,
                        e = this.findChildComponent("content/bgNum/txtNum", n);
                    e.string = t > 99 ? "99+" : t + ""
                }
                onBeforeClose() {}
                onDestroy() {}
            }), s._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WorldBossRankRewardView.ts", ["cc", "./ItemGrid.ts", "./UIList.ts", "./NodeUtil.ts", "./index52.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var i, e, s, n, o, d, a, r, h, l;
    return {
        setters: [function(t) {
            i = t.cclegacy, e = t.Label, s = t.ScrollView, n = t.Button, o = t.js, d = t.Sprite
        }, function(t) {
            a = t.ItemGrid
        }, function(t) {
            r = t.ListItem
        }, function(t) {
            h = t.default
        }, null, function(t) {
            l = t.BaseView
        }],
        execute: function() {
            i._RF.push({}, "66388tZ5NpK4K+BVVkTRGNX", "WorldBossRankRewardView", void 0);
            t("WorldBossRankRewardView", class extends l {
                constructor() {
                    super(), this.txtRank = void 0, this.txtTips = void 0, this.RewardUIList = void 0, this.selfRewardList = void 0, this.selfRewarddata = void 0, this.name = "WorldBossRankRewardView", this.url = "ui/module/dungeon/WorldBossRankRewardView"
                }
                onInit() {
                    this.txtRank = this.findChildComponent("root/content/txtRank", e);
                    const t = this.findChildComponent("root/ScrollView", s);
                    this.RewardUIList = this.addUIList(t, m, !0);
                    const i = this.findChildComponent("root/content/nodeTop/ScrollView", s);
                    this.selfRewardList = this.addUIList(i, c), this.selfRewardList.lackCenter = !0;
                    const o = this.findChild("root/btnClose");
                    this.addComponentCallbackListener(o, n.EventType.CLICK, (() => {
                        this.close()
                    })), this.txtTips = this.findChildComponent("root/content/nodeTop/txtTips", e)
                }
                onAfterOpen() {
                    let t = configWorld_boss_rank.getDatas();
                    this.RewardUIList.datas = t;
                    const i = this.openArgs[0];
                    this.txtRank.string = o.formatStr(GetLanguage(201577), i), 0 == i && (this.txtTips.string = GetLanguage(200155), this.txtRank.string = GetLanguage(200156));
                    let e = [];
                    for (let s = 0; s < t.length; s++)
                        if (i >= t[s].rank[0] && i <= t[s].rank[1]) {
                            e = t[s].reward_rank;
                            break
                        } this.selfRewarddata = e, this.selfRewardList.datas = this.selfRewarddata
                }
                registerUpdateHandler() {}
                onBeforeClose() {}
                onDestroy() {}
            });
            class m extends r {
                constructor(...t) {
                    super(...t), this.titleIcon = void 0, this.txtNum = void 0, this.imgNum1 = void 0, this.imgNum2 = void 0, this.imgNum3 = void 0, this.selfRewardList = void 0, this.selfRewarddata = void 0
                }
                onInit() {
                    this.titleIcon = h.findChildComponent(this.node, "titleIcon", d), this.txtNum = h.findChildComponent(this.node, "txtNum", e), this.imgNum1 = h.findChild(this.node, "imgNum1"), this.imgNum2 = h.findChild(this.node, "imgNum2"), this.imgNum3 = h.findChild(this.node, "imgNum3");
                    const t = h.findChildComponent(this.node, "ScrollView", s);
                    this.selfRewardList = this.view.addUIList(t, c, !1), this.selfRewardList.touchEvent = !1
                }
                onRender(t, i) {
                    t.rank[0] == t.rank[1] ? (this.txtNum.node.active = !1, this.imgNum1.active = 1 == t.rank[0], this.imgNum2.active = 2 == t.rank[0], this.imgNum3.active = 3 == t.rank[0]) : (this.imgNum1.active = !1, this.imgNum2.active = !1, this.imgNum3.active = !1, this.txtNum.node.active = !0, this.txtNum.string = `${t.rank[0]}-${t.rank[1]}`);
                    let e = [];
                    for (let i = 0; i < t.reward_rank.length; i++) e.push(t.reward_rank[i]);
                    this.selfRewarddata = e, this.selfRewardList.datas = this.selfRewarddata
                }
            }
            class c extends r {
                constructor(...t) {
                    super(...t), this.itemNode = void 0
                }
                onInit() {
                    this.itemNode = h.findChild(this.node, "itemGrid")
                }
                onRender(t, i) {
                    new a(this.view, this.itemNode).SetItemId(t[0], t[1])
                }
            }
            i._RF.pop()
        }
    }
})
System.register("chunks:///_virtual/WorldBossRewardView.ts", ["cc", "./index52.ts", "./StringUtil.ts", "./ChapterDataCache.ts", "./BaseView.ts"], function(t) {
    "use strict";
    var e, n, o, i, s, r;
    return {
        setters: [function(t) {
            e = t.Button, n = t.Label, o = t.cclegacy
        }, null, function(t) {
            i = t.default
        }, function(t) {
            s = t.ChapterDataCache
        }, function(t) {
            r = t.BaseView
        }],
        execute: function() {
            o._RF.push({}, "d86beFndCtIG76JZ2UKVjpL", "WorldBossRewardView", void 0);
            t("default", class extends r {
                constructor() {
                    super(), this.data = void 0, this.name = "WorldBossRewardView", this.url = "ui/module/dungeon/WorldBossRewardView", this.poolTime = 3e3
                }
                onInit() {
                    const t = this.findChild("imgMask");
                    this.addComponentCallbackListener(t, e.EventType.CLICK, (() => {
                        this.close()
                    }))
                }
                onAfterOpen() {
                    this.data = this.openArgs[0], this.refreshRewardTips()
                }
                registerUpdateHandler() {}
                refreshRewardTips() {
                    const t = this.findChild("root/Node/txtDesc2"),
                        e = this.findChild("root/Node/node1/num"),
                        o = this.findChild("root/Node/node1/num1"),
                        r = this.findChild("root/Node/node2/num"),
                        d = this.findChild("root/Node/node2/num1");
                    var a = 0,
                        h = 0;
                    for (const {
                            k: t,
                            v: s
                        }
                        of this.data.ext) 2 == t ? (a = s, e.getComponent(n).string = i.GetNumString(s), o.getComponent(n).string = i.GetNumString(s)) : 4 == t && (h = s, r.getComponent(n).string = `${s}`, d.getComponent(n).string = `${s}`);
                    const c = IS(s).worldBossInfo;
                    e.active = a >= c.my_hurt, o.active = a < c.my_hurt, r.active = h < c.my_rank, d.active = h >= c.my_rank, t.active = !1, (a >= c.my_hurt || h < c.my_rank) && (t.active = !0)
                }
                onBeforeClose() {}
                onDestroy() {}
            }), o._RF.pop()
        }
    }
})
System.register("virtual:///prerequisite-imports/script", ["chunks:///_virtual/script"], function(_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
                if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }

            _export(_exportObj);
        }],
        execute: function() {}
    };
})